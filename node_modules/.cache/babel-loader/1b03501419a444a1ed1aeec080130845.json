{"ast":null,"code":"import { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nconst name = \"@firebase/database\";\nconst version = \"0.14.4\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** The semver (www.semver.org) version of the SDK. */\n\nlet SDK_VERSION = '';\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\n\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\n\n\nclass DOMStorageWrapper {\n  /**\r\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  constructor(domStorage_) {\n    this.domStorage_ = domStorage_; // Use a prefix to avoid collisions with other stuff saved by the app.\n\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param key - The key to save the value under\r\n   * @param value - The value being stored, or null to remove the key.\r\n   */\n\n\n  set(key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n  /**\r\n   * @returns The value that was stored under this key, or null\r\n   */\n\n\n  get(key) {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  prefixedName_(name) {\n    return this.prefix_ + name;\n  }\n\n  toString() {\n    return this.domStorage_.toString();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\n\n\nclass MemoryStorage {\n  constructor() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n\n  set(key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key) {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n\n    return null;\n  }\n\n  remove(key) {\n    delete this.cache_[key];\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\n\n\nconst createStoragefor = function (domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {} // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n\n\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\n\n\nconst PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\n\nconst SessionStorage = createStoragefor('sessionStorage');\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst logClient = new Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\n\nconst LUIDGenerator = function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\n\n\nconst sha1 = function (str) {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function () {\n  let message = '';\n\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n\n    if (Array.isArray(arg) || arg && typeof arg === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n\n    message += ' ';\n  }\n\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\n\n\nlet logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n */\n\nlet firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\n\nconst enableLogging$1 = function (logger_, persistent) {\n  assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nconst log = function () {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging$1(true);\n    }\n  }\n\n  if (logger) {\n    for (var _len = arguments.length, varArgs = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      varArgs[_key2] = arguments[_key2];\n    }\n\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nconst logWrapper = function (prefix) {\n  return function () {\n    for (var _len2 = arguments.length, varArgs = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      varArgs[_key3] = arguments[_key3];\n    }\n\n    log(prefix, ...varArgs);\n  };\n};\n\nconst error = function () {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...arguments);\n  logClient.error(message);\n};\n\nconst fatal = function () {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...arguments)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nconst warn = function () {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...arguments);\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\n\n\nconst warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\n\n\nconst isInvalidJSONNumber = function (data) {\n  return typeof data === 'number' && (data !== data || // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\n\nconst executeWhenDOMReady = function (fn) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    let called = false;\n\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false); // fallback to onload.\n\n      window.addEventListener('load', wrappedFn, false); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      }); // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      window.attachEvent('onload', wrappedFn); // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\n\n\nconst MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\n\nconst MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\n\nconst nameCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n          bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @returns {!number} comparison result.\r\n */\n\n\nconst stringCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nconst requireKey = function (key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n  }\n};\n\nconst ObjectToUniqueKey = function (obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = []; // eslint-disable-next-line guard-for-in\n\n  for (const k in obj) {\n    keys.push(k);\n  } // Export as json, but with the keys sorted.\n\n\n  keys.sort();\n  let key = '{';\n\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\n\n\nconst splitStringBySize = function (str, segsize) {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\n\n\nfunction each(obj, fn) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\n\n\nconst doubleToIEEE754String = function (v) {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n        fbits = 52;\n  const bias = (1 << ebits - 1) - 1;\n  let s, e, f, ln, i; // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  } // Pack sign, exponent, fraction\n\n\n  const bits = [];\n\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join(''); // Return the data as a hex string. --MJL\n\n  let hexByteString = '';\n\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n\n    hexByteString = hexByteString + hexByte;\n  }\n\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\n\n\nconst isChromeExtensionContentScript = function () {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\n\n\nconst isWindowsStoreApp = function () {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\n\n\nfunction errorForServerCode(code, query) {\n  let reason = 'Unknown Error';\n\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  error.code = code.toUpperCase();\n  return error;\n}\n/**\r\n * Used to test for integer-looking strings\r\n */\n\n\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\n\nconst INTEGER_32_MIN = -2147483648;\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\n\nconst INTEGER_32_MAX = 2147483647;\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\n\nconst tryParseInt = function (str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\n\n\nconst exceptionGuard = function (fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\n\n\nconst beingCrawled = function () {\n  const userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || ''; // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\n\n\nconst setTimeoutNonBlocking = function (fn, time) {\n  const timeout = setTimeout(fn, time); // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n\n  if (typeof timeout === 'number' && // @ts-ignore Is only defined in Deno environments.\n  typeof Deno !== 'undefined' && // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n  Deno['unrefTimer']) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n\n  return timeout;\n};\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\n\n\nclass AppCheckTokenProvider {\n  constructor(appName_, appCheckProvider) {\n    this.appName_ = appName_;\n    this.appCheckProvider = appCheckProvider;\n    this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.appCheck) {\n      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => this.appCheck = appCheck);\n    }\n  }\n\n  getToken(forceRefresh) {\n    if (!this.appCheck) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener) {\n    var _a;\n\n    (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken() {\n    warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` + 'are invalid. This usually indicates your app was not initialized correctly.');\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\n\n\nclass FirebaseAuthTokenProvider {\n  constructor(appName_, firebaseOptions_, authProvider_) {\n    this.appName_ = appName_;\n    this.firebaseOptions_ = firebaseOptions_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth_) {\n      authProvider_.onInit(auth => this.auth_ = auth);\n    }\n  }\n\n  getToken(forceRefresh) {\n    if (!this.auth_) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_.get().then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener) {\n    this.authProvider_.get().then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken() {\n    let errorMessage = 'Provided authentication credentials for the app named \"' + this.appName_ + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n\n    warn(errorMessage);\n  }\n\n}\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\n\n\nclass EmulatorTokenProvider {\n  constructor(accessToken) {\n    this.accessToken = accessToken;\n  }\n\n  getToken(forceRefresh) {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener) {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener) {}\n\n  notifyForInvalidToken() {}\n\n}\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n\n\nEmulatorTokenProvider.OWNER = 'owner';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst PROTOCOL_VERSION = '5';\nconst VERSION_PARAM = 'v';\nconst TRANSPORT_SESSION_PARAM = 's';\nconst REFERER_PARAM = 'r';\nconst FORGE_REF = 'f'; // Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\n\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nconst LAST_SESSION_PARAM = 'ls';\nconst APPLICATION_ID_PARAM = 'p';\nconst APP_CHECK_TOKEN_PARAM = 'ac';\nconst WEBSOCKET = 'websocket';\nconst LONG_POLLING = 'long_polling';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A class that holds metadata about a Repo object\r\n */\n\nclass RepoInfo {\n  /**\r\n   * @param host - Hostname portion of the url for the repo\r\n   * @param secure - Whether or not this repo is accessed over ssl\r\n   * @param namespace - The namespace represented by the repo\r\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n   * @param persistenceKey - Override the default session persistence storage key\r\n   */\n  constructor(host, secure, namespace, webSocketOnly) {\n    let nodeAdmin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let persistenceKey = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n    let includeNamespaceInQueryParams = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let isUsingEmulator = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.nodeAdmin = nodeAdmin;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this.isUsingEmulator = isUsingEmulator;\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this._host;\n  }\n\n  isCacheableHost() {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString() {\n    let str = this.toURLString();\n\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n\n    return str;\n  }\n\n  toURLString() {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams ? `?ns=${this.namespace}` : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo) {\n  return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;\n}\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\n\n\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n  let connURL;\n\n  if (type === WEBSOCKET) {\n    connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs = [];\n  each(params, (key, value) => {\n    pairs.push(key + '=' + value);\n  });\n  return connURL + pairs.join('&');\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Tracks a collection of stats.\r\n */\n\n\nclass StatsCollection {\n  constructor() {\n    this.counters_ = {};\n  }\n\n  incrementCounter(name) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst collections = {};\nconst reporters = {};\n\nfunction statsManagerGetCollection(repoInfo) {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString];\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\n\n\nclass PacketReceiver {\n  /**\r\n   * @param onMessage_\r\n   */\n  constructor(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n\n  closeAfter(responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   */\n\n\n  handleResponse(requestNum, data) {\n    this.pendingResponses[requestNum] = data;\n\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n\n        break;\n      }\n\n      this.currentResponseNum++;\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\n\n\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe'; //Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\n\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\n\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\n\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\n\nconst LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n */\n\nclass BrowserPollConnection {\n  /**\r\n   * @param connId An identifier for this connection, used for logging\r\n   * @param repoInfo The info for the endpoint to send data to.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The AppCheck token for this client.\r\n   * @param authToken The AuthToken to use for this connection.\r\n   * @param transportSessionId Optional transportSessionid if we are\r\n   * reconnecting for an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n   * already created a connection previously\r\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n\n    this.urlFn = params => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n\n\n  open(onMessage, onDisconnect) {\n    var _this = this;\n\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.'); // Make sure we clear the host cache\n\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)); // Ensure we delay the creation of the iframe until the DOM is loaded.\n\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      } //Set up a callback that gets triggered once a connection is set up.\n\n\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n\n        const [command, arg1, arg2, arg3, arg4] = args;\n\n        _this.incrementIncomingBytes_(args);\n\n        if (!_this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n\n        _this.everConnected_ = true;\n\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false; // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n\n            _this.myPacketOrderer.closeAfter(arg1, () => {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        for (var _len4 = arguments.length, args = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n\n        const [pN, data] = args;\n\n        _this.incrementIncomingBytes_(args);\n\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, () => {\n        this.onClosed_();\n      }, this.urlFn); //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n\n      if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n\n\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n\n\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n\n\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  } // Static method, use string literal so it can be accessed in a generic way\n\n\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  }\n  /**\r\n   * No-op for polling\r\n   */\n\n\n  markConnectionHealthy() {}\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   */\n\n\n  shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    } //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n\n\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n  /**\r\n   * Triggered when this transport is closed\r\n   */\n\n\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n\n\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param data - The JSON data to transmit.\r\n   */\n\n\n  send(data) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //first, lets get the base64-encoded data\n\n    const base64data = base64Encode(dataStr); //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE); //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  }\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   */\n\n\n  addDisconnectPingFrame(id, pw) {\n    if (isNodeSdk()) {\n      return;\n    }\n\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  }\n  /**\r\n   * Used to track the bytes received by this client\r\n   */\n\n\n  incrementIncomingBytes_(args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n\n}\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\n\n\nclass FirebaseIFrameScriptHolder {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn; //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n\n    this.outstandingRequests = new Set(); //A queue of the pending segments waiting for transmission to the server.\n\n    this.pendingSegs = []; //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n\n    this.currentSerial = Math.floor(Math.random() * 100000000); // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n\n    this.sendNewPolls = true;\n\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB; //Create an iframe for us to add script tags to.\n\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_(); // Set the iframe's contents.\n\n      let script = ''; // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n\n      const iframeContents = '<html><body>' + script + '</body></html>';\n\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n\n        if (e.stack) {\n          log(e.stack);\n        }\n\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   */\n\n\n  static createIFrame_() {\n    const iframe = document.createElement('iframe');\n    iframe.style.display = 'none'; // This is necessary in order to initialize the document inside the iframe\n\n    if (document.body) {\n      document.body.appendChild(iframe);\n\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    } // Get the document of the iframe in a browser-specific way.\n\n\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  }\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n\n\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    } // Protect from being called recursively.\n\n\n    const onDisconnect = this.onDisconnect;\n\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param id - The ID of this connection\r\n   * @param pw - The password for this connection\r\n   */\n\n\n  startLongPoll(id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true; //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n\n    while (this.newRequest_()) {}\n  }\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n\n\n  newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams); //Now add as much data as we can.\n\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n\n\n  enqueueSegment(segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    }); //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param url - The URL of the script tag.\r\n   * @param serial - The serial number of the request.\r\n   */\n\n\n  addLongPollTag_(url, serial) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    }; // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n\n\n    const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout); // Trigger a new request so we can continue receiving data.\n\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param url - The URL for the script tag source.\r\n   * @param loadCB - A callback to be triggered once the script has loaded.\r\n   */\n\n\n  addTag(url, loadCB) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          newScript.onload = newScript.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = newScript.readyState;\n\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = newScript.onreadystatechange = null;\n\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n\n              loadCB();\n            }\n          };\n\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {// TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nlet WebSocketImpl = null;\n\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\n\n\nclass WebSocketConnection {\n  /**\r\n   * @param connId identifier for this transport\r\n   * @param repoInfo The info for the websocket endpoint.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The App Check Token for this client.\r\n   * @param authToken The Auth Token for this client.\r\n   * @param transportSessionId Optional transportSessionId if this is connecting\r\n   * to an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if there was a previous\r\n   * connection\r\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n  /**\r\n   * @param repoInfo - The info for the websocket endpoint.\r\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n   * @returns connection url\r\n   */\n\n\n  static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\n    const urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (!isNodeSdk() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n\n\n  open(onMessage, onDisconnect) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false; // Assume failure until proven otherwise.\n\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options;\n\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node'; // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        }; // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        } // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n\n\n        const env = process['env'];\n        const proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n      }\n\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n\n      if (error) {\n        this.log_(error);\n      }\n\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m);\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      const error = e.message || e.data;\n\n      if (error) {\n        this.log_(error);\n      }\n\n      this.onClosed_();\n    };\n  }\n  /**\r\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n   */\n\n\n  start() {}\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable() {\n    let isOldAndroid = false;\n\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  }\n  /**\r\n   * Returns true if we previously failed to connect with this transport.\r\n   */\n\n\n  static previouslyFailed() {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  appendFrame_(data) {\n    this.frames.push(data);\n\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess); //handle the message\n\n      this.onMessage(jsonMess);\n    }\n  }\n  /**\r\n   * @param frameCount - The number of frames we are expecting from the server\r\n   */\n\n\n  handleNewFrameCount_(frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n  /**\r\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n   * @returns Any remaining data to be process, or null if there is none\r\n   */\n\n\n  extractFrameCount_(data) {\n    assert(this.frames === null, 'We already have a frame buffer'); // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n  /**\r\n   * Process a websocket frame that has arrived from the server.\r\n   * @param mess - The frame data\r\n   */\n\n\n  handleIncomingFrame(mess) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n\n    const data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n  /**\r\n   * Send a message to the server\r\n   * @param data - The JSON object to transmit\r\n   */\n\n\n  send(data) {\n    this.resetKeepAlive();\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE); //Send the length header\n\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    } //Send the actual data in segments.\n\n\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_(); // since this is an internal close, trigger the close listener\n\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n  /**\r\n   * External-facing close handler.\r\n   * Close the websocket and kill the connection.\r\n   */\n\n\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n  /**\r\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n   * the last activity.\r\n   */\n\n\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n\n      this.resetKeepAlive(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  }\n  /**\r\n   * Send a string over the websocket.\r\n   *\r\n   * @param str - String to send.\r\n   */\n\n\n  sendString_(str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n\n}\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\n\n\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\n\nWebSocketConnection.healthyTimeout = 30000;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\n\nclass TransportManager {\n  /**\r\n   * @param repoInfo - Metadata around the namespace we're connecting to\r\n   */\n  constructor(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n  /**\r\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n   * TransportManager has already set up transports_\r\n   */\n\n\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  initTransports_(repoInfo) {\n    const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = this.transports_ = [];\n\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n  /**\r\n   * @returns The constructor for the initial transport to use\r\n   */\n\n\n  initialTransport() {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n  /**\r\n   * @returns The constructor for the next transport, or null\r\n   */\n\n\n  upgradeTransport() {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n\n} // Keeps track of whether the TransportManager has already chosen a transport to use\n\n\nTransportManager.globalTransportInitialized_ = false;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\n\nconst UPGRADE_TIMEOUT = 60000; // For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\n\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000; // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\n\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\nconst SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\n\nclass Connection {\n  /**\r\n   * @param id - an id for this connection\r\n   * @param repoInfo_ - the info for the endpoint to connect to\r\n   * @param applicationId_ - the Firebase App ID for this project\r\n   * @param appCheckToken_ - The App Check Token for this device.\r\n   * @param authToken_ - The auth token for this session.\r\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.appCheckToken_ = appCheckToken_;\n    this.authToken_ = authToken_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0\n    /* RealtimeState.CONNECTING */\n    ;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   */\n\n\n  start_() {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n\n        if (!this.isHealthy_) {\n          if (this.conn_ && this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has received ' + this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (this.conn_ && this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has sent ' + this.conn_.bytesSent + ' bytes.  Leaving connection alive.'); // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      }, Math.floor(healthyTimeoutMS));\n    }\n  }\n\n  nextTransportId_() {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  connReceiver_(conn) {\n    return message => {\n      if (this.state_ !== 2\n      /* RealtimeState.DISCONNECTED */\n      ) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n  /**\r\n   * @param dataMsg - An arbitrary data message to be sent to the server\r\n   */\n\n\n  sendRequest(dataMsg) {\n    // wrap in a data message envelope and send it on\n    const msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null; // the server will shutdown the old connection\n    }\n  }\n\n  onSecondaryControl_(controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE];\n\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close(); // If we were already using this connection for something, than we need to fully close\n\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  onSecondaryMessageReceived_(parsedData) {\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n\n  proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start(); // send ack\n\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    }); // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  }\n\n  onPrimaryMessageReceived_(parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  onDataMessage_(message) {\n    this.onPrimaryResponse_(); // We don't do anything with data messages, just kick them up a level\n\n    this.onMessage_(message);\n  }\n\n  onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  onControl_(controlData) {\n    const cmd = requireKey(MESSAGE_TYPE, controlData);\n\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = Object.assign({}, payload);\n\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n  /**\r\n   * @param handshake - The handshake data returned from the server\r\n   */\n\n\n  onHandshake_(handshake) {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host; // if we've already closed the connection, then don't bother trying to progress further\n\n    if (this.state_ === 0\n    /* RealtimeState.CONNECTING */\n    ) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      } // TODO: do we want to upgrade? when? maybe a delay?\n\n\n      this.tryStartUpgrade_();\n    }\n  }\n\n  tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  startUpgrade_(conn) {\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect); // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  onReset_(host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host; // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n\n    if (this.state_ === 1\n    /* RealtimeState.CONNECTED */\n    ) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  onConnectionEstablished_(conn, timestamp) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1\n    /* RealtimeState.CONNECTED */\n    ;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    } // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n\n\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1\n    /* RealtimeState.CONNECTED */\n    ) {\n      this.log_('sending ping on primary.');\n      this.sendData_({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n\n  onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n  /**\r\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   */\n\n\n  onConnectionLost_(everConnected) {\n    this.conn_ = null; // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n\n    if (!everConnected && this.state_ === 0\n    /* RealtimeState.CONNECTING */\n    ) {\n      this.log_('Realtime connection failed.'); // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host); // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === 1\n    /* RealtimeState.CONNECTED */\n    ) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  onConnectionShutdown_(reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    } // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n\n\n    this.onDisconnect_ = null;\n    this.close();\n  }\n\n  sendData_(data) {\n    if (this.state_ !== 1\n    /* RealtimeState.CONNECTED */\n    ) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n\n\n  close() {\n    if (this.state_ !== 2\n    /* RealtimeState.DISCONNECTED */\n    ) {\n      this.log_('Closing realtime connection.');\n      this.state_ = 2\n      /* RealtimeState.DISCONNECTED */\n      ;\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  closeConnections_() {\n    this.log_('Shutting down all connections');\n\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\n\n\nclass ServerActions {\n  put(pathString, data, onComplete, hash) {}\n\n  merge(pathString, data, onComplete, hash) {}\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param token - The authentication token\r\n   */\n\n\n  refreshAuthToken(token) {}\n  /**\r\n   * Refreshes the app check token for the current connection.\r\n   * @param token The app check token\r\n   */\n\n\n  refreshAppCheckToken(token) {}\n\n  onDisconnectPut(pathString, data, onComplete) {}\n\n  onDisconnectMerge(pathString, data, onComplete) {}\n\n  onDisconnectCancel(pathString, onComplete) {}\n\n  reportStats(stats) {}\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\n\n\nclass EventEmitter {\n  constructor(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   */\n\n\n  trigger(eventType) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (var _len5 = arguments.length, varArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {\n        varArgs[_key6 - 1] = arguments[_key6];\n      }\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback,\n      context\n    });\n    const eventData = this.getInitialEvent(eventType);\n\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n\n    for (let i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  validateEventType_(eventType) {\n    assert(this.allowedEvents_.find(et => {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\n\n\nclass OnlineMonitor extends EventEmitter {\n  constructor() {\n    super(['online']);\n    this.online_ = true; // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !isMobileCordova()) {\n      window.addEventListener('online', () => {\n        if (!this.online_) {\n          this.online_ = true;\n          this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', () => {\n        if (this.online_) {\n          this.online_ = false;\n          this.trigger('online', false);\n        }\n      }, false);\n    }\n  }\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  getInitialEvent(eventType) {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline() {\n    return this.online_;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Maximum key depth. */\n\n\nconst MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\n\nconst MAX_PATH_LENGTH_BYTES = 768;\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\n\nclass Path {\n  /**\r\n   * @param pathOrString - Path string to parse, or another path, or the raw\r\n   * tokens array\r\n   */\n  constructor(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/'); // Remove empty pieces.\n\n      let copyTo = 0;\n\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString() {\n    let pathString = '';\n\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n\n}\n\nfunction newEmptyPath() {\n  return new Path('');\n}\n\nfunction pathGetFront(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n/**\r\n * @returns The number of segments in this path\r\n */\n\n\nfunction pathGetLength(path) {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nfunction pathPopFront(path) {\n  let pieceNum = path.pieceNum_;\n\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n\n  return new Path(path.pieces_, pieceNum);\n}\n\nfunction pathGetBack(path) {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nfunction pathToUrlEncodedString(path) {\n  let pathString = '';\n\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\n\n\nfunction pathSlice(path) {\n  let begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nfunction pathParent(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nfunction pathChild(path, childPathObj) {\n  const pieces = [];\n\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n/**\r\n * @returns True if there are no segments in this path\r\n */\n\n\nfunction pathIsEmpty(path) {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\n\n\nfunction newRelativePath(outerPath, innerPath) {\n  const outer = pathGetFront(outerPath),\n        inner = pathGetFront(innerPath);\n\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n  }\n}\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\n\n\nfunction pathCompare(left, right) {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\r\n * @returns true if paths are the same.\r\n */\n\n\nfunction pathEquals(path, other) {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\n\n\nfunction pathContains(path, other) {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n\n    ++i;\n    ++j;\n  }\n\n  return true;\n}\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\n\n\nclass ValidationPath {\n  /**\r\n   * @param path - Initial Path.\r\n   * @param errorPrefix_ - Prefix for any error messages.\r\n   */\n  constructor(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n\n    validationPathCheckValid(this);\n  }\n\n}\n\nfunction validationPathPush(validationPath, child) {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nfunction validationPathPop(validationPath) {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last); // Un-count the previous '/'\n\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath) {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');\n  }\n\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + MAX_PATH_DEPTH + ') or object contains a cycle ' + validationPathToErrorString(validationPath));\n  }\n}\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\n\n\nfunction validationPathToErrorString(validationPath) {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass VisibilityMonitor extends EventEmitter {\n  constructor() {\n    super(['visible']);\n    let hidden;\n    let visibilityChange;\n\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    } // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n\n\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, () => {\n        const visible = !document[hidden];\n\n        if (visible !== this.visible_) {\n          this.visible_ = visible;\n          this.trigger('visible', visible);\n        }\n      }, false);\n    }\n  }\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  getInitialEvent(eventType) {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\n\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\n\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\n\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill'; // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\n\nconst INVALID_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\n\nclass PersistentConnection extends ServerActions {\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param applicationId_ - The Firebase App ID for this project\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.onConnectStatus_ = onConnectStatus_;\n    this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    this.authOverride_ = authOverride_; // Used for diagnostic logging.\n\n    this.id = PersistentConnection.nextPersistentConnectionId_++;\n    this.log_ = logWrapper('p:' + this.id + ':');\n    this.interruptReasons_ = {};\n    this.listens = new Map();\n    this.outstandingPuts_ = [];\n    this.outstandingGets_ = [];\n    this.outstandingPutCount_ = 0;\n    this.outstandingGetCount_ = 0;\n    this.onDisconnectRequestQueue_ = [];\n    this.connected_ = false;\n    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    this.securityDebugCallback_ = null;\n    this.lastSessionId = null;\n    this.establishConnectionTimer_ = null;\n    this.visible_ = false; // Before we get connected, we keep a queue of pending messages to send.\n\n    this.requestCBHash_ = {};\n    this.requestNumber_ = 0;\n    this.realtime_ = null;\n    this.authToken_ = null;\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = false;\n    this.invalidAuthTokenCount_ = 0;\n    this.invalidAppCheckTokenCount_ = 0;\n    this.firstConnection_ = true;\n    this.lastConnectionAttemptTime_ = null;\n    this.lastConnectionEstablishedTime_ = null;\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  sendRequest(action, body, onResponse) {\n    const curReqNum = ++this.requestNumber_;\n    const msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(stringify(msg));\n    assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query) {\n    this.initConnection_();\n    const deferred = new Deferred();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: message => {\n        const payload = message['d'];\n\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(query, currentHashFn, tag, onComplete) {\n    this.initConnection_();\n    const queryId = query._queryIdentifier;\n\n    const pathString = query._path.toString();\n\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n    assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\n    const listenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  sendGet_(index) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, message => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  sendListen_(listenSpec) {\n    const query = listenSpec.query;\n\n    const pathString = query._path.toString();\n\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/\n      p: pathString\n    };\n    const action = 'q'; // Only bother to send query if it's non-default.\n\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[\n    /*hash*/\n    'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, message => {\n      const payload = message[\n      /*data*/\n      'd'];\n      const status = message[\n      /*status*/\n      's']; // print warnings in any case...\n\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n      const currentListenSpec = this.listens.get(pathString) && this.listens.get(pathString).get(queryId); // only trigger actions if the listen hasn't been removed and readded\n\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  static warnOnListenWarnings_(payload, query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload, 'w');\n\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n\n        const indexPath = query._path.toString();\n\n        warn(`Using an unspecified index. Your data will be downloaded and ` + `filtered on the client. Consider adding ${indexSpec} at ` + `${indexPath} to your security rules for better performance.`);\n      }\n    }\n  }\n\n  refreshAuthToken(token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  reduceReconnectDelayIfAdminCredential_(credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n  /**\r\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n   * a auth revoked (the connection is closed).\r\n   */\n\n\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData = {\n        cred: token\n      };\n\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n\n      this.sendRequest(authMethod, requestData, res => {\n        const status = res[\n        /*status*/\n        's'];\n        const data = res[\n        /*data*/\n        'd'] || 'error';\n\n        if (this.authToken_ === token) {\n          if (status === 'ok') {\n            this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  }\n  /**\r\n   * Attempts to authenticate with the given token. If the authentication\r\n   * attempt fails, it's triggered like the token was revoked (the connection is\r\n   * closed).\r\n   */\n\n\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest('appcheck', {\n        'token': this.appCheckToken_\n      }, res => {\n        const status = res[\n        /*status*/\n        's'];\n        const data = res[\n        /*data*/\n        'd'] || 'error';\n\n        if (status === 'ok') {\n          this.invalidAppCheckTokenCount_ = 0;\n        } else {\n          this.onAppCheckRevoked_(status, data);\n        }\n      });\n    }\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  unlisten(query, tag) {\n    const pathString = query._path.toString();\n\n    const queryId = query._queryIdentifier;\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n    const listen = this.removeListen_(pathString, queryId);\n\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  sendUnlisten_(pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/\n      p: pathString\n    };\n    const action = 'n'; // Only bother sending queryId if it's non-default.\n\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(pathString, data, onComplete) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(pathString, data, onComplete) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(pathString, onComplete) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  sendOnDisconnect_(action, pathString, data, onComplete) {\n    const request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, response => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(response[\n          /*status*/\n          's'], response[\n          /* data */\n          'd']);\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(action, pathString, data, onComplete, hash) {\n    this.initConnection_();\n    const request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n\n    if (hash !== undefined) {\n      request[\n      /*hash*/\n      'h'] = hash;\n    } // TODO: Only keep track of the most recent put for a given path?\n\n\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  sendPut_(index) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, message => {\n      this.log_(action + ' response', message);\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--; // Clean up array occasionally.\n\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(message[\n        /*status*/\n        's'], message[\n        /* data */\n        'd']);\n      }\n    });\n  }\n\n  reportStats(stats) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = {\n        /*counters*/\n        c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest(\n      /*stats*/\n      's', request, result => {\n        const status = result[\n        /*status*/\n        's'];\n\n        if (status !== 'ok') {\n          const errorReason = result[\n          /* data */\n          'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  onDataMessage_(message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'];\n      const onResponse = this.requestCBHash_[reqNum];\n\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[\n        /*body*/\n        'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  }\n\n  onDataPush_(action, body) {\n    this.log_('handleServerMessage', action, body);\n\n    if (action === 'd') {\n      this.onDataUpdate_(body[\n      /*path*/\n      'p'], body[\n      /*data*/\n      'd'],\n      /*isMerge*/\n      false, body['t']);\n    } else if (action === 'm') {\n      this.onDataUpdate_(body[\n      /*path*/\n      'p'], body[\n      /*data*/\n      'd'],\n      /*isMerge=*/\n      true, body['t']);\n    } else if (action === 'c') {\n      this.onListenRevoked_(body[\n      /*path*/\n      'p'], body[\n      /*query*/\n      'q']);\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(body[\n      /*status code*/\n      's'], body[\n      /* explanation */\n      'd']);\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(body[\n      /*status code*/\n      's'], body[\n      /* explanation */\n      'd']);\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error('Unrecognized action received from server: ' + stringify(action) + '\\nAre you using the latest client?');\n    }\n  }\n\n  onReady_(timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  scheduleConnect_(timeout) {\n    assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    } // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout));\n  }\n\n  initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  onVisible_(visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n\n    this.visible_ = visible;\n  }\n\n  onOnline_(online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null; // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n\n    this.cancelSentTransactions_(); // Clear out the pending requests.\n\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay); // Adjust reconnect delay for next time.\n\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n\n    this.onConnectStatus_(false);\n  }\n\n  async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection = null;\n\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n\n      const sendRequestFn = function (msg) {\n        assert(connection, \"sendRequest call when we're not connected not allowed.\");\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([this.authTokenProvider_.getToken(forceRefresh), this.appCheckTokenProvider_.getToken(forceRefresh)]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect,\n          /* onKill= */\n          reason => {\n            warn(reason + ' (' + this.repoInfo_.toString() + ')');\n            this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n          }, lastSessionId);\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  handleTimestamp_(timestamp) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  }\n\n  cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n\n      if (put &&\n      /*hash*/\n      'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    } // Clean up array occasionally.\n\n\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  onListenRevoked_(pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n\n    const listen = this.removeListen_(pathString, queryId);\n\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  removeListen_(pathString, queryId) {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n\n    let listen;\n\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map.delete(queryId);\n\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n\n    return listen;\n  }\n\n  onAuthRevoked_(statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS; // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  onAppCheckRevoked_(statusCode, explanation) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true; // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  onSecurityDebugPacket_(body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  }\n\n  restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck(); // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n  /**\r\n   * Sends client stats for first connection\r\n   */\n\n\n  sendConnectStats_() {\n    const stats = {};\n    let clientName = 'js';\n\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n\n    this.reportStats(stats);\n  }\n\n  shouldReconnect_() {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n\n}\n\nPersistentConnection.nextPersistentConnectionId_ = 0;\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\n\nPersistentConnection.nextConnectionId_ = 0;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass NamedNode {\n  constructor(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n\n  static Wrap(name, node) {\n    return new NamedNode(name, node);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass Index {\n  /**\r\n   * @returns A standalone comparison function for\r\n   * this index\r\n   */\n  getCompare() {\n    return this.compare.bind(this);\n  }\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   *\r\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n\n\n  indexedValueChanged(oldNode, newNode) {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n  /**\r\n   * @returns a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet __EMPTY_NODE;\n\nclass KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  compare(a, b) {\n    return nameCompare(a.name, b.name);\n  }\n\n  isDefinedOn(node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  indexedValueChanged(oldNode, newNode) {\n    return false; // The key for a node never changes.\n  }\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n\n  maxPost() {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue, name) {\n    assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.'); // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n\n\n  toString() {\n    return '.key';\n  }\n\n}\n\nconst KEY_INDEX = new KeyIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An iterator over an LLRBNode.\r\n */\n\nclass SortedMapIterator {\n  /**\r\n   * @param node - Node to iterate.\r\n   * @param isReverse_ - Whether or not to iterate in reverse\r\n   */\n  constructor(node, startKey, comparator, isReverse_) {\n    let resultGenerator_ = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    this.nodeStack_ = [];\n    let cmp = 1;\n\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse\n\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result;\n\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext() {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  }\n\n}\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\n\n\nclass LLRBNode {\n  /**\r\n   * @param key - Key associated with this node.\r\n   * @param value - Value associated with this node.\r\n   * @param color - Whether this node is red.\r\n   * @param left - Left child.\r\n   * @param right - Right child.\r\n   */\n  constructor(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param key - New key for the node, or null.\r\n   * @param value - New value for the node, or null.\r\n   * @param color - New color for the node, or null.\r\n   * @param left - New left child for the node, or null.\r\n   * @param right - New right child for the node, or null.\r\n   * @returns The node copy.\r\n   */\n\n\n  copy(key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  }\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n\n\n  count() {\n    return this.left.count() + 1 + this.right.count();\n  }\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n\n\n  isEmpty() {\n    return false;\n  }\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   *   node.  If it returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  inorderTraversal(action) {\n    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n  }\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n\n\n  reverseTraversal(action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  }\n  /**\r\n   * @returns The minimum node in the tree.\r\n   */\n\n\n  min_() {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  }\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n\n\n  minKey() {\n    return this.min_().key;\n  }\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n\n\n  maxKey() {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n  /**\r\n   * @param key - Key to insert.\r\n   * @param value - Value to insert.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the key/value added.\r\n   */\n\n\n  insert(key, value, comparator) {\n    let n = this;\n    const cmp = comparator(key, n.key);\n\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n\n    return n.fixUp_();\n  }\n  /**\r\n   * @returns New tree, with the minimum key removed.\r\n   */\n\n\n  removeMin_() {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n\n    let n = this;\n\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  }\n  /**\r\n   * @param key - The key of the item to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the specified item removed.\r\n   */\n\n\n  remove(key, comparator) {\n    let n, smallest;\n    n = this;\n\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n\n    return n.fixUp_();\n  }\n  /**\r\n   * @returns Whether this is a RED node.\r\n   */\n\n\n  isRed_() {\n    return this.color;\n  }\n  /**\r\n   * @returns New tree after performing any needed rotations.\r\n   */\n\n\n  fixUp_() {\n    let n = this;\n\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n\n    return n;\n  }\n  /**\r\n   * @returns New tree, after moveRedLeft.\r\n   */\n\n\n  moveRedLeft_() {\n    let n = this.colorFlip_();\n\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  }\n  /**\r\n   * @returns New tree, after moveRedRight.\r\n   */\n\n\n  moveRedRight_() {\n    let n = this.colorFlip_();\n\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  }\n  /**\r\n   * @returns New tree, after rotateLeft.\r\n   */\n\n\n  rotateLeft_() {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  }\n  /**\r\n   * @returns New tree, after rotateRight.\r\n   */\n\n\n  rotateRight_() {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  }\n  /**\r\n   * @returns Newt ree, after colorFlip.\r\n   */\n\n\n  colorFlip_() {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n  /**\r\n   * For testing.\r\n   *\r\n   * @returns True if all is well.\r\n   */\n\n\n  checkMaxDepth_() {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_() {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n\n    const blackDepth = this.left.check_();\n\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n\n}\n\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\n\nclass LLRBEmptyNode {\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @returns The node copy.\r\n   */\n  copy(key, value, color, left, right) {\n    return this;\n  }\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item added.\r\n   */\n\n\n  insert(key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  }\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item removed.\r\n   */\n\n\n  remove(key, comparator) {\n    return this;\n  }\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n\n\n  count() {\n    return 0;\n  }\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n\n\n  isEmpty() {\n    return true;\n  }\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n\n\n  inorderTraversal(action) {\n    return false;\n  }\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n\n\n  reverseTraversal(action) {\n    return false;\n  }\n\n  minKey() {\n    return null;\n  }\n\n  maxKey() {\n    return null;\n  }\n\n  check_() {\n    return 0;\n  }\n  /**\r\n   * @returns Whether this node is red.\r\n   */\n\n\n  isRed_() {\n    return false;\n  }\n\n}\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\n\n\nclass SortedMap {\n  /**\r\n   * @param comparator_ - Key comparator.\r\n   * @param root_ - Optional root node for the map.\r\n   */\n  constructor(comparator_) {\n    let root_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SortedMap.EMPTY_NODE;\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @returns New map, with item added.\r\n   */\n\n\n  insert(key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @returns New map, with item removed.\r\n   */\n\n\n  remove(key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param key - The key to look up.\r\n   * @returns The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n\n\n  get(key) {\n    let cmp;\n    let node = this.root_;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n\n    return null;\n  }\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param key - The key to find the predecessor of\r\n   * @returns The predecessor key.\r\n   */\n\n\n  getPredecessorKey(key) {\n    let cmp,\n        node = this.root_,\n        rightParent = null;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  }\n  /**\r\n   * @returns True if the map is empty.\r\n   */\n\n\n  isEmpty() {\n    return this.root_.isEmpty();\n  }\n  /**\r\n   * @returns The total number of nodes in the map.\r\n   */\n\n\n  count() {\n    return this.root_.count();\n  }\n  /**\r\n   * @returns The minimum key in the map.\r\n   */\n\n\n  minKey() {\n    return this.root_.minKey();\n  }\n  /**\r\n   * @returns The maximum key in the map.\r\n   */\n\n\n  maxKey() {\n    return this.root_.maxKey();\n  }\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  inorderTraversal(action) {\n    return this.root_.inorderTraversal(action);\n  }\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns True if the traversal was aborted.\r\n   */\n\n\n  reverseTraversal(action) {\n    return this.root_.reverseTraversal(action);\n  }\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @returns The iterator.\r\n   */\n\n\n  getIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  }\n\n  getIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  }\n\n  getReverseIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  }\n\n  getReverseIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  }\n\n}\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\n\n\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\n\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet MAX_NODE$2;\n\nfunction setMaxNode$1(val) {\n  MAX_NODE$2 = val;\n}\n\nconst priorityHashText = function (priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\n\n\nconst validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n  } // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n\n\n  assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\n\n\nclass LeafNode {\n  /**\r\n   * @param value_ - The value to store in this leaf node. The object type is\r\n   * possible in the event of a deferred value\r\n   * @param priorityNode_ - The priority of this node.\r\n   */\n  constructor(value_) {\n    let priorityNode_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  static set __childrenNodeConstructor(val) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n  /** @inheritDoc */\n\n\n  isLeafNode() {\n    return true;\n  }\n  /** @inheritDoc */\n\n\n  getPriority() {\n    return this.priorityNode_;\n  }\n  /** @inheritDoc */\n\n\n  updatePriority(newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n  /** @inheritDoc */\n\n\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  /** @inheritDoc */\n\n\n  getChild(path) {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  hasChild() {\n    return false;\n  }\n  /** @inheritDoc */\n\n\n  getPredecessorChildName(childName, childNode) {\n    return null;\n  }\n  /** @inheritDoc */\n\n\n  updateImmediateChild(childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  }\n  /** @inheritDoc */\n\n\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n    }\n  }\n  /** @inheritDoc */\n\n\n  isEmpty() {\n    return false;\n  }\n  /** @inheritDoc */\n\n\n  numChildren() {\n    return 0;\n  }\n  /** @inheritDoc */\n\n\n  forEachChild(index, action) {\n    return false;\n  }\n\n  val(exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n  /** @inheritDoc */\n\n\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n\n      if (!this.priorityNode_.isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n\n      this.lazyHash_ = sha1(toHash);\n    }\n\n    return this.lazyHash_;\n  }\n  /**\r\n   * Returns the value of the leaf node.\r\n   * @returns The value of the node.\r\n   */\n\n\n  getValue() {\n    return this.value_;\n  }\n\n  compareTo(other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  }\n  /**\r\n   * Comparison specifically for two leaf nodes\r\n   */\n\n\n  compareToLeafNode_(otherLeaf) {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  withIndex() {\n    return this;\n  }\n\n  isIndexed() {\n    return true;\n  }\n\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\n\n\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nlet nodeFromJSON$1;\nlet MAX_NODE$1;\n\nfunction setNodeFromJSON(val) {\n  nodeFromJSON$1 = val;\n}\n\nfunction setMaxNode(val) {\n  MAX_NODE$1 = val;\n}\n\nclass PriorityIndex extends Index {\n  compare(a, b) {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  isDefinedOn(node) {\n    return !node.getPriority().isEmpty();\n  }\n\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n\n  maxPost() {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  }\n\n  makePost(indexValue, name) {\n    const priorityNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n\n\n  toString() {\n    return '.priority';\n  }\n\n}\n\nconst PRIORITY_INDEX = new PriorityIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  constructor(length) {\n    const logBase2 = num => // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parseInt(Math.log(num) / LOG_2, 10);\n\n    const bitMask = bits => parseInt(Array(bits + 1).join('1'), 2);\n\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n\n  nextBitIsOne() {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  }\n\n}\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\n\n\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (low, high) {\n    const length = high - low;\n    let namedNode;\n    let key;\n\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt(length / 2, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n\n  const buildFrom12Array = function (base12) {\n    let node = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize, color) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n\n    const attachPennant = function (pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne(); // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  return new SortedMap(mapSortFn || cmp, root);\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet _defaultIndexMap;\n\nconst fallbackObject = {};\n\nclass IndexMap {\n  constructor(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n  /**\r\n   * The default IndexMap for nodes without a priority\r\n   */\n\n\n  static get Default() {\n    assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n    _defaultIndexMap = _defaultIndexMap || new IndexMap({\n      '.priority': fallbackObject\n    }, {\n      '.priority': PRIORITY_INDEX\n    });\n    return _defaultIndexMap;\n  }\n\n  get(indexKey) {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition) {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(indexDefinition, existingChildren) {\n    assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n\n    let newIndex;\n\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n\n    const indexName = indexDefinition.toString();\n    const newIndexSet = Object.assign({}, this.indexSet_);\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = Object.assign({}, this.indexes_);\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   */\n\n\n  addToIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\n      const index = safeGet(this.indexSet_, indexName);\n      assert(index, 'Missing index implementation for ' + indexName);\n\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          const childList = [];\n          const iter = existingChildren.getIterator(NamedNode.Wrap);\n          let next = iter.getNext();\n\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n\n            next = iter.getNext();\n          }\n\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        let newChildren = indexedChildren;\n\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   */\n\n\n  removeFromIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, indexedChildren => {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\n\nlet EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\n\nclass ChildrenNode {\n  /**\r\n   * @param children_ - List of children of this node..\r\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n   */\n  constructor(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n\n  static get EMPTY_NODE() {\n    return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n  }\n  /** @inheritDoc */\n\n\n  isLeafNode() {\n    return false;\n  }\n  /** @inheritDoc */\n\n\n  getPriority() {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n  /** @inheritDoc */\n\n\n  updatePriority(newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n  /** @inheritDoc */\n\n\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n  /** @inheritDoc */\n\n\n  getChild(path) {\n    const front = pathGetFront(path);\n\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n  /** @inheritDoc */\n\n\n  hasChild(childName) {\n    return this.children_.get(childName) !== null;\n  }\n  /** @inheritDoc */\n\n\n  updateImmediateChild(childName, newChildNode) {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n  /** @inheritDoc */\n\n\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n  /** @inheritDoc */\n\n\n  isEmpty() {\n    return this.children_.isEmpty();\n  }\n  /** @inheritDoc */\n\n\n  numChildren() {\n    return this.children_.count();\n  }\n  /** @inheritDoc */\n\n\n  val(exportFormat) {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj = {};\n    let numKeys = 0,\n        maxKey = 0,\n        allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array = []; // eslint-disable-next-line guard-for-in\n\n      for (const key in obj) {\n        array[key] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n\n      return obj;\n    }\n  }\n  /** @inheritDoc */\n\n\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n\n      if (!this.getPriority().isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n\n    return this.lazyHash_;\n  }\n  /** @inheritDoc */\n\n\n  getPredecessorChildName(childName, childNode, index) {\n    const idx = this.resolveIndex_(index);\n\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition) {\n    const minKey = this.getFirstChildName(indexDefinition);\n\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n  /**\r\n   * Given an index, return the key name of the largest value we have, according to that index\r\n   */\n\n\n  getLastChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition) {\n    const maxKey = this.getLastChildName(indexDefinition);\n\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  forEachChild(index, action) {\n    const idx = this.resolveIndex_(index);\n\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(startPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  }\n\n  getReverseIterator(indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  }\n\n  getReverseIteratorFrom(endPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  }\n\n  compareTo(other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  withIndex(indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  isIndexed(index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other;\n\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n  /**\r\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n   * instead.\r\n   *\r\n   */\n\n\n  resolveIndex_(indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n\n}\n\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\nclass MaxNode extends ChildrenNode {\n  constructor() {\n    super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n  }\n\n  compareTo(other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority() {\n    return this;\n  }\n\n  getImmediateChild(childName) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty() {\n    return false;\n  }\n\n}\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\n\n\nconst MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\n\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\n\nfunction nodeFromJSON(json) {\n  let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  } // Valid leaf nodes include non-objects or server-value wrapper objects\n\n\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n\n        if (!childNode.isEmpty()) {\n          childrenHavePriority = childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\n\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n    }\n  } else {\n    let node = ChildrenNode.EMPTY_NODE;\n    each(json, (key, childData) => {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass PathIndex extends Index {\n  constructor(indexPath_) {\n    super();\n    this.indexPath_ = indexPath_;\n    assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n  }\n\n  extractChild(snap) {\n    return snap.getChild(this.indexPath_);\n  }\n\n  isDefinedOn(node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  compare(a, b) {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  }\n\n  maxPost() {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  toString() {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass ValueIndex extends Index {\n  compare(a, b) {\n    const indexCmp = a.node.compareTo(b.node);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  isDefinedOn(node) {\n    return true;\n  }\n\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  }\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n\n  maxPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  }\n\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n\n\n  toString() {\n    return '.value';\n  }\n\n}\n\nconst VALUE_INDEX = new ValueIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction changeValue(snapshotNode) {\n  return {\n    type: \"value\"\n    /* ChangeType.VALUE */\n    ,\n    snapshotNode\n  };\n}\n\nfunction changeChildAdded(childName, snapshotNode) {\n  return {\n    type: \"child_added\"\n    /* ChangeType.CHILD_ADDED */\n    ,\n    snapshotNode,\n    childName\n  };\n}\n\nfunction changeChildRemoved(childName, snapshotNode) {\n  return {\n    type: \"child_removed\"\n    /* ChangeType.CHILD_REMOVED */\n    ,\n    snapshotNode,\n    childName\n  };\n}\n\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n  return {\n    type: \"child_changed\"\n    /* ChangeType.CHILD_CHANGED */\n    ,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nfunction changeChildMoved(childName, snapshotNode) {\n  return {\n    type: \"child_moved\"\n    /* ChangeType.CHILD_MOVED */\n    ,\n    snapshotNode,\n    childName\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\n\n\nclass IndexedFilter {\n  constructor(index_) {\n    this.index_ = index_;\n  }\n\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    const oldChild = snap.getImmediateChild(key); // Check if anything actually changed.\n\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n        } else {\n          assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n      }\n    }\n\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n          }\n        });\n      }\n\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n          }\n        });\n      }\n    }\n\n    return newSnap.withIndex(this.index_);\n  }\n\n  updatePriority(oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  filtersNodes() {\n    return false;\n  }\n\n  getIndexedFilter() {\n    return this;\n  }\n\n  getIndex() {\n    return this.index_;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\n\n\nclass RangedFilter {\n  constructor(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost() {\n    return this.startPost_;\n  }\n\n  getEndPost() {\n    return this.endPost_;\n  }\n\n  matches(node) {\n    const isWithinStart = this.startIsInclusive_ ? this.index_.compare(this.getStartPost(), node) <= 0 : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_ ? this.index_.compare(node, this.getEndPost()) <= 0 : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  }\n\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n\n    let filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  filtersNodes() {\n    return true;\n  }\n\n  getIndexedFilter() {\n    return this.indexedFilter_;\n  }\n\n  getIndex() {\n    return this.index_;\n  }\n\n  static getStartPost_(params) {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  static getEndPost_(params) {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\n\n\nclass LimitedFilter {\n  constructor(params) {\n    this.withinDirectionalStart = node => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n    this.withinDirectionalEnd = node => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n    this.withinStartPost = node => {\n      const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\n      return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n    };\n\n    this.withinEndPost = node => {\n      const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\n      return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n    };\n\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  }\n\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    let filtered;\n\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_); // anchor to the startPost, endPost, or last element as appropriate\n\n        let iterator;\n\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n\n        let count = 0;\n\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        let iterator;\n\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange = count < this.limit_ && this.withinDirectionalStart(next) && this.withinDirectionalEnd(next);\n\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  filtersNodes() {\n    return true;\n  }\n\n  getIndexedFilter() {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  getIndex() {\n    return this.index_;\n  }\n\n  fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n\n      cmp = (a, b) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n\n    const oldEventCache = snap;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n\n      const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n        }\n\n        const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n          }\n\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\n\n\nclass QueryParams {\n  constructor() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.startAfterSet_ = false; // can only be true if startSet_ is true\n\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.endBeforeSet_ = false; // can only be true if endSet_ is true\n\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n\n  hasStart() {\n    return this.startSet_;\n  }\n  /**\r\n   * @returns True if it would return from left.\r\n   */\n\n\n  isViewFromLeft() {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === \"l\"\n      /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */\n      ;\n    }\n  }\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   */\n\n\n  getIndexStartValue() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   */\n\n\n  getIndexStartName() {\n    assert(this.startSet_, 'Only valid if start has been set');\n\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd() {\n    return this.endSet_;\n  }\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   */\n\n\n  getIndexEndValue() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   */\n\n\n  getIndexEndName() {\n    assert(this.endSet_, 'Only valid if end has been set');\n\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit() {\n    return this.limitSet_;\n  }\n  /**\r\n   * @returns True if a limit has been set and it has been explicitly anchored\r\n   */\n\n\n  hasAnchoredLimit() {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   */\n\n\n  getLimit() {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex() {\n    return this.index_;\n  }\n\n  loadsAllData() {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault() {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy() {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n}\n\nfunction queryParamsGetNodeFilter(queryParams) {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"l\"\n  /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */\n  ;\n  return newParams;\n}\n\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"r\"\n  /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */\n  ;\n  return newParams;\n}\n\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n\n  newParams.indexStartValue_ = indexValue;\n\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n\n  return newParams;\n}\n\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n  let params;\n\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n\n  params.startAfterSet_ = true;\n  return params;\n}\n\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n\n  newParams.indexEndValue_ = indexValue;\n\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n\n  return newParams;\n}\n\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n  let params;\n\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nfunction queryParamsOrderBy(queryParams, index) {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\n\n\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n  const qs = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = \"$priority\"\n    /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */\n    ;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = \"$value\"\n    /* REST_QUERY_CONSTANTS.VALUE_INDEX */\n    ;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = \"$key\"\n    /* REST_QUERY_CONSTANTS.KEY_INDEX */\n    ;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n\n  qs[\"orderBy\"\n  /* REST_QUERY_CONSTANTS.ORDER_BY */\n  ] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_ ? \"startAfter\"\n    /* REST_QUERY_CONSTANTS.START_AFTER */\n    : \"startAt\"\n    /* REST_QUERY_CONSTANTS.START_AT */\n    ;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_ ? \"endBefore\"\n    /* REST_QUERY_CONSTANTS.END_BEFORE */\n    : \"endAt\"\n    /* REST_QUERY_CONSTANTS.END_AT */\n    ;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[\"limitToFirst\"\n      /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */\n      ] = queryParams.limit_;\n    } else {\n      qs[\"limitToLast\"\n      /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */\n      ] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nfunction queryParamsGetQueryObject(queryParams) {\n  const obj = {};\n\n  if (queryParams.startSet_) {\n    obj[\"sp\"\n    /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */\n    ] = queryParams.indexStartValue_;\n\n    if (queryParams.startNameSet_) {\n      obj[\"sn\"\n      /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */\n      ] = queryParams.indexStartName_;\n    }\n\n    obj[\"sin\"\n    /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */\n    ] = !queryParams.startAfterSet_;\n  }\n\n  if (queryParams.endSet_) {\n    obj[\"ep\"\n    /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */\n    ] = queryParams.indexEndValue_;\n\n    if (queryParams.endNameSet_) {\n      obj[\"en\"\n      /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */\n      ] = queryParams.indexEndName_;\n    }\n\n    obj[\"ein\"\n    /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */\n    ] = !queryParams.endBeforeSet_;\n  }\n\n  if (queryParams.limitSet_) {\n    obj[\"l\"\n    /* WIRE_PROTOCOL_CONSTANTS.LIMIT */\n    ] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = \"l\"\n        /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */\n        ;\n      } else {\n        viewFrom = \"r\"\n        /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */\n        ;\n      }\n    }\n\n    obj[\"vf\"\n    /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */\n    ] = viewFrom;\n  } // For now, priority index is the default, so we only specify if it's some other index\n\n\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[\"i\"\n    /* WIRE_PROTOCOL_CONSTANTS.INDEX */\n    ] = queryParams.index_.toString();\n  }\n\n  return obj;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\n\n\nclass ReadonlyRestClient extends ServerActions {\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    /** @private {function(...[*])} */\n\n    this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     */\n\n    this.listens_ = {};\n  }\n\n  reportStats(stats) {\n    throw new Error('Method not implemented.');\n  }\n\n  static getListenId_(query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n      return query._path.toString();\n    }\n  }\n  /** @inheritDoc */\n\n\n  listen(query, currentHashFn, tag, onComplete) {\n    const pathString = query._path.toString();\n\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier); // Mark this listener so we can tell if it's removed.\n\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n\n      if (error === null) {\n        this.onDataUpdate_(pathString, data,\n        /*isMerge=*/\n        false, tag);\n      }\n\n      if (safeGet(this.listens_, listenId) === thisListen) {\n        let status;\n\n        if (!error) {\n          status = 'ok';\n        } else if (error === 401) {\n          status = 'permission_denied';\n        } else {\n          status = 'rest_error:' + error;\n        }\n\n        onComplete(status, null);\n      }\n    });\n  }\n  /** @inheritDoc */\n\n\n  unlisten(query, tag) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query) {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred();\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n\n      if (error === null) {\n        this.onDataUpdate_(pathString, data,\n        /*isMerge=*/\n        false,\n        /*tag=*/\n        null);\n        deferred.resolve(data);\n      } else {\n        deferred.reject(new Error(data));\n      }\n    });\n    return deferred.promise;\n  }\n  /** @inheritDoc */\n\n\n  refreshAuthToken(token) {// no-op since we just always call getToken.\n  }\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   */\n\n\n  restRequest_(pathString) {\n    let queryStringParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let callback = arguments.length > 2 ? arguments[2] : undefined;\n    queryStringParameters['format'] = 'export';\n    return Promise.all([this.authTokenProvider_.getToken(\n    /*forceRefresh=*/\n    false), this.appCheckTokenProvider_.getToken(\n    /*forceRefresh=*/\n    false)]).then(_ref => {\n      let [authToken, appCheckToken] = _ref;\n\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url = (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host + pathString + '?' + 'ns=' + this.repoInfo_.namespace + querystring(queryStringParameters);\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n          let res = null;\n\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n\n            callback(xhr.status);\n          }\n\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url,\n      /*asynchronous=*/\n      true);\n      xhr.send();\n    });\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\n\n\nclass SnapshotHolder {\n  constructor() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n\n  getNode(path) {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction newSparseSnapshotTree() {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\n\n\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\n\n\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\n\n\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\n\n\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\n\n\nclass StatsListener {\n  constructor(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n\n  get() {\n    const newStats = this.collection_.get();\n    const delta = Object.assign({}, newStats);\n\n    if (this.last_) {\n      each(this.last_, (stat, value) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n\n    this.last_ = newStats;\n    return delta;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\n\n\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000; // We'll continue to report stats on average every 5 minutes.\n\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nclass StatsReporter {\n  constructor(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    const timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats = {};\n    let haveStatsToReport = false;\n    each(stats, (stat, value) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    } // queue our next run.\n\n\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @enum\r\n */\n\n\nvar OperationType;\n\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\n\nfunction newOperationSourceUser() {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nfunction newOperationSourceServer() {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nfunction newOperationSourceServerTaggedQuery(queryId) {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass AckUserWrite {\n  /**\r\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n   */\n  constructor(\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  affectedTree,\n  /** @inheritDoc */\n  revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n\n    this.source = newOperationSourceUser();\n  }\n\n  operationForChild(childName) {\n    if (!pathIsEmpty(this.path)) {\n      assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.'); // All child locations are affected as well; just return same operation.\n\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass ListenComplete {\n  constructor(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass Overwrite {\n  constructor(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n\n    this.type = OperationType.OVERWRITE;\n  }\n\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass Merge {\n  constructor(\n  /** @inheritDoc */\n  source,\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n\n    this.type = OperationType.MERGE;\n  }\n\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n\n  toString() {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\n\n\nclass CacheNode {\n  constructor(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   */\n\n\n  isFullyInitialized() {\n    return this.fullyInitialized_;\n  }\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   */\n\n\n  isFiltered() {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path) {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  }\n\n  getNode() {\n    return this.node_;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\n\n\nclass EventGenerator {\n  constructor(query_) {\n    this.query_ = query_;\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n\n}\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\n\n\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n  const events = [];\n  const moves = [];\n  changes.forEach(change => {\n    if (change.type === \"child_changed\"\n    /* ChangeType.CHILD_CHANGED */\n    && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\"\n  /* ChangeType.CHILD_REMOVED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\"\n  /* ChangeType.CHILD_ADDED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\"\n  /* ChangeType.CHILD_MOVED */\n  , moves, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\"\n  /* ChangeType.CHILD_CHANGED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\"\n  /* ChangeType.VALUE */\n  , changes, eventRegistrations, eventCache);\n  return events;\n}\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\n\n\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n  filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction newViewCache(eventCache, serverCache) {\n  return {\n    eventCache,\n    serverCache\n  };\n}\n\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n  return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\n\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n  return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\n\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n  return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;\n}\n\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n  return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\n\nconst EmptyChildren = () => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\n\n\nclass ImmutableTree {\n  constructor(value) {\n    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EmptyChildren();\n    this.value = value;\n    this.children = children;\n  }\n\n  static fromObject(obj) {\n    let tree = new ImmutableTree(null);\n    each(obj, (childPath, childSnap) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n  /**\r\n   * True if the value is empty and there are no children\r\n   */\n\n\n  isEmpty() {\n    return this.value === null && this.children.isEmpty();\n  }\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param relativePath - The remainder of the path\r\n   * @param predicate - The predicate to satisfy to return a node\r\n   */\n\n\n  findRootMostMatchingPathAndValue(relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: newEmptyPath(),\n        value: this.value\n      };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   */\n\n\n  findRootMostValueAndPath(relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n  /**\r\n   * @returns The subtree at the given path\r\n   */\n\n\n  subtree(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param relativePath - Path to set value at.\r\n   * @param toSet - Value to set.\r\n   * @returns Resulting tree.\r\n   */\n\n\n  set(relativePath, toSet) {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param relativePath - Path to value to remove.\r\n   * @returns Resulting tree.\r\n   */\n\n\n  remove(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param relativePath - Path to get value for.\r\n   * @returns Value at path, or null.\r\n   */\n\n\n  get(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param relativePath - Path to replace subtree for.\r\n   * @param newTree - New tree.\r\n   * @returns Resulting tree.\r\n   */\n\n\n  setTree(relativePath, newTree) {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   */\n\n\n  fold(fn) {\n    return this.fold_(newEmptyPath(), fn);\n  }\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   */\n\n\n  fold_(pathSoFar, fn) {\n    const accum = {};\n    this.children.inorderTraversal((childKey, childTree) => {\n      accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  }\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   */\n\n\n  findOnPath(path, f) {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  findOnPath_(pathToFollow, pathSoFar, f) {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow);\n        const nextChild = this.children.get(front);\n\n        if (nextChild) {\n          return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(path, f) {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  foreachOnPath_(pathToFollow, currentRelativePath, f) {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param f - A function to be called with the path from the root of the tree to\r\n   * a node, and the value at that node. Called in depth-first order.\r\n   */\n\n\n  foreach(f) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  foreach_(currentRelativePath, f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\n\n\nclass CompoundWrite {\n  constructor(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n\n  static empty() {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n\n}\n\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n  let newWrite = compoundWrite;\n  each(updates, (childKey, node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\n\n\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n    return new CompoundWrite(newWriteTree);\n  }\n}\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\n\n\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\n\n\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n\n  if (rootmost != null) {\n    return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\n\n\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n  const children = [];\n  const node = compoundWrite.writeTree_.value;\n\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n        children.push(new NamedNode(childName, childNode));\n      });\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value != null) {\n        children.push(new NamedNode(childName, childTree.value));\n      }\n    });\n  }\n\n  return children;\n}\n\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\n\n\nfunction compoundWriteIsEmpty(compoundWrite) {\n  return compoundWrite.writeTree_.isEmpty();\n}\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\n\n\nfunction compoundWriteApply(compoundWrite, node) {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n      }\n    }); // If there was a priority write, we only apply it if the node is not empty\n\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n    }\n\n    return node;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\n\n\nfunction writeTreeChildWrites(writeTree, path) {\n  return newWriteTreeRef(path, writeTree);\n}\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\n\n\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n\n  if (visible === undefined) {\n    visible = true;\n  }\n\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n  }\n\n  writeTree.lastWriteId = writeId;\n}\n/**\r\n * Record a new merge from user code.\r\n */\n\n\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n  writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n  writeTree.lastWriteId = writeId;\n}\n\nfunction writeTreeGetWrite(writeTree, writeId) {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n\n  return null;\n}\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\n\n\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n\n    if (currentWrite.visible) {\n      if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n    } else {\n      const children = writeToRemove.children;\n      each(children, childName => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n      });\n    }\n\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\n\n\nfunction writeTreeResetTree_(writeTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\n\n\nfunction writeTreeDefaultFilter_(write) {\n  return write.visible;\n}\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\n\n\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n  let compoundWrite = CompoundWrite.empty();\n\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i]; // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath;\n\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n        } else ;\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n            }\n          }\n        } else ;\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n\n  return compoundWrite;\n}\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\n\n\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n        return null;\n      } else {\n        const filter = function (write) {\n          return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));\n        };\n\n        const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\n\n\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n  let completeChildren = ChildrenNode.EMPTY_NODE;\n  const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n      });\n    }\n\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n      completeChildren = completeChildren.updateImmediateChild(childName, node);\n    }); // Add any complete children we have from the set\n\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  }\n}\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\n\n\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n  assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n  const path = pathChild(treePath, childPath);\n\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n    }\n  }\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\n\n\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n      return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n    } else {\n      return null;\n    }\n  }\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\n\n\nfunction writeTreeShadowingWrite(writeTree, path) {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\n\n\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n  let toIterate;\n  const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n\n  toIterate = toIterate.withIndex(index);\n\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n\n      next = iter.getNext();\n    }\n\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nfunction newWriteTree() {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\n\n\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\n\n\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n  return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\n\n\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n  return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\n\n\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n  return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\n\n\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n  return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\n\n\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n  return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\n\n\nfunction writeTreeRefChild(writeTreeRef, childName) {\n  return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\n\nfunction newWriteTreeRef(path, writeTree) {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass ChildChangeAccumulator {\n  constructor() {\n    this.changeMap = new Map();\n  }\n\n  trackChildChange(change) {\n    const type = change.type;\n    const childKey = change.childName;\n    assert(type === \"child_added\"\n    /* ChangeType.CHILD_ADDED */\n    || type === \"child_changed\"\n    /* ChangeType.CHILD_CHANGED */\n    || type === \"child_removed\"\n    /* ChangeType.CHILD_REMOVED */\n    , 'Only child changes supported for tracking');\n    assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    const oldChange = this.changeMap.get(childKey);\n\n    if (oldChange) {\n      const oldType = oldChange.type;\n\n      if (type === \"child_added\"\n      /* ChangeType.CHILD_ADDED */\n      && oldType === \"child_removed\"\n      /* ChangeType.CHILD_REMOVED */\n      ) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type === \"child_removed\"\n      /* ChangeType.CHILD_REMOVED */\n      && oldType === \"child_added\"\n      /* ChangeType.CHILD_ADDED */\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (type === \"child_removed\"\n      /* ChangeType.CHILD_REMOVED */\n      && oldType === \"child_changed\"\n      /* ChangeType.CHILD_CHANGED */\n      ) {\n        this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n      } else if (type === \"child_changed\"\n      /* ChangeType.CHILD_CHANGED */\n      && oldType === \"child_added\"\n      /* ChangeType.CHILD_ADDED */\n      ) {\n        this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n      } else if (type === \"child_changed\"\n      /* ChangeType.CHILD_CHANGED */\n      && oldType === \"child_changed\"\n      /* ChangeType.CHILD_CHANGED */\n      ) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges() {\n    return Array.from(this.changeMap.values());\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\n\nclass NoCompleteChildSource_ {\n  getCompleteChild(childKey) {\n    return null;\n  }\n\n  getChildAfterChild(index, child, reverse) {\n    return null;\n  }\n\n}\n/**\r\n * Singleton instance.\r\n */\n\n\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\n\nclass WriteTreeCompleteChildSource {\n  constructor(writes_, viewCache_) {\n    let optCompleteServerCache_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n\n  getCompleteChild(childKey) {\n    const node = this.viewCache_.eventCache;\n\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n\n  getChildAfterChild(index, child, reverse) {\n    const completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction newViewProcessor(filter) {\n  return {\n    filter\n  };\n}\n\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n  assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n  assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\n\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation;\n\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n\n      filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);\n      newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation;\n\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered\n\n      filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation;\n\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return {\n    viewCache: newViewCache,\n    changes\n  };\n}\n\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n  const eventSnap = newViewCache.eventCache;\n\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n\n    if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n      accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n  const oldEventSnap = viewCache.eventCache;\n\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n\n      if (childKey === '.priority') {\n        assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode(); // we might have overwrites for this priority\n\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath); // update child\n\n        let newEventChild;\n\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n        }\n\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();\n\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n  } else {\n    const childKey = pathGetFront(changePath);\n\n    if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n    } else {\n      newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n    }\n  }\n\n  const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n  const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\n\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n    newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n  } else {\n    const childKey = pathGetFront(changePath);\n\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n      newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n\n        if (childNode != null) {\n          if (pathGetBack(childChangePath) === '.priority' && childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {\n    return viewCache;\n  } // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n\n\n  let curViewCache = viewCache;\n  let viewMergeTree;\n\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n  }\n\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === null;\n\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  } // Only filter server node if it is currently filtered\n\n\n  const filterServerNode = viewCache.serverCache.isFiltered(); // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n\n  const serverCache = viewCache.serverCache;\n\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n      return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n      }\n    });\n    return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n  }\n}\n\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\n\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n  let complete;\n\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n        newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n      }\n\n      newNode = newNode;\n      newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n\n      if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n      } else {\n        newEventCache = oldEventCache;\n      }\n\n      if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n        }\n      }\n    }\n\n    complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\n\n\nclass View {\n  constructor(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    const params = this.query_._queryParams;\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n    this.processor_ = newViewProcessor(filter);\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache; // Don't filter server node with other filter than index, wait for tagged listen\n\n    const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query() {\n    return this.query_;\n  }\n\n}\n\nfunction viewGetServerCache(view) {\n  return view.viewCache_.serverCache.getNode();\n}\n\nfunction viewGetCompleteNode(view) {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nfunction viewGetCompleteServerCache(view, path) {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {\n      return cache.getChild(path);\n    }\n  }\n\n  return null;\n}\n\nfunction viewIsEmpty(view) {\n  return view.eventRegistrations_.length === 0;\n}\n\nfunction viewAddEventRegistration(view, eventRegistration) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\n\n\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n  const cancelEvents = [];\n\n  if (cancelError) {\n    assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n\n  return cancelEvents;\n}\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\n\n\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n  if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n    assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n    assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n  assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n  view.viewCache_ = result.viewCache;\n  return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\n\nfunction viewGetInitialEvents(view, registration) {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges = [];\n\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode();\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n\n  return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\n\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n  const registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\n\nclass SyncPoint {\n  constructor() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     */\n    this.views = new Map();\n  }\n\n}\n\nfunction syncPointSetReferenceConstructor(val) {\n  assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n  referenceConstructor$1 = val;\n}\n\nfunction syncPointGetReferenceConstructor() {\n  assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n  return referenceConstructor$1;\n}\n\nfunction syncPointIsEmpty(syncPoint) {\n  return syncPoint.views.size === 0;\n}\n\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n  const queryId = operation.source.queryId;\n\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n  } else {\n    let events = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n    }\n\n    return events;\n  }\n}\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n    let eventCacheComplete = false;\n\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n\n    const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n    return new View(query, viewCache);\n  }\n\n  return view;\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  } // This is guaranteed to exist now, we just created anything that was missing\n\n\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\n\n\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n  const queryId = query._queryIdentifier;\n  const removed = [];\n  let cancelEvents = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId); // We'll deal with complete views later.\n\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n\n    if (view) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId); // We'll deal with complete views later.\n\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n  }\n\n  return {\n    removed,\n    events: cancelEvents\n  };\n}\n\nfunction syncPointGetQueryViews(syncPoint) {\n  const result = [];\n\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n\n  return result;\n}\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\n\n\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n  let serverCache = null;\n\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n\n  return serverCache;\n}\n\nfunction syncPointViewForQuery(syncPoint, query) {\n  const params = query._queryParams;\n\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nfunction syncPointHasCompleteView(syncPoint) {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nfunction syncPointGetCompleteView(syncPoint) {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nlet referenceConstructor;\n\nfunction syncTreeSetReferenceConstructor(val) {\n  assert(!referenceConstructor, '__referenceConstructor has already been defined');\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor() {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n/**\r\n * Static tracker for next query tag.\r\n */\n\n\nlet syncTreeNextQueryTag_ = 1;\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\n\nclass SyncTree {\n  /**\r\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  constructor(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     */\n\n    this.syncPointTree_ = new ImmutableTree(null);\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     */\n\n    this.pendingWriteTree_ = newWriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n\n}\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n  // Record pending write.\n  writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n  }\n}\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeAckUserWrite(syncTree, writeId) {\n  let revert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree(null);\n\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, pathString => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n  }\n}\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyListenComplete(syncTree, path) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n          queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */\n\n\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\n  let skipListenerDedup = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents = []; // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n\n  if (maybeSyncPoint && (query._queryIdentifier === 'default' || syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n    const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\r\n       * We may have just removed one of many listeners and can short-circuit this whole process\r\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n       * properly set up.\r\n       */\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault = -1 !== removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n      const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path); // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree); // Ok, we've collected all the listens we need. Set them up.\n\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n                  newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\n          }\n        } // Otherwise there's nothing below us, so nothing we need to start listening on\n\n      } // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n\n\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag = null;\n          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n        } else {\n          removed.forEach(queryToRemove => {\n            const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n          });\n        }\n      }\n    } // Now, clear all of the tags we're tracking for the removed listens\n\n\n    syncTreeRemoveTags_(syncTree, removed);\n  }\n\n  return cancelEvents;\n}\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n          queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n          queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\n\n\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\n  let skipSetupListener = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const path = query._path;\n  let serverCache = null;\n  let foundAncestorDefaultView = false; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(childName, completeCache);\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n\n  return events;\n}\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\n\n\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\n    const relativePath = newRelativePath(pathSoFar, path);\n    const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n\n    if (serverCache) {\n      return serverCache;\n    }\n  });\n  return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\n\nfunction syncTreeGetServerValue(syncTree, query) {\n  const path = query._path;\n  let serverCache = null; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n  return viewGetCompleteNode(view);\n}\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\n\n\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n  return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_,\n  /*serverCache=*/\n  null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\n\n\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath()); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n\n    if (childTree && childOperation) {\n      const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n\n    if (syncPoint) {\n      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n\n    return events;\n  }\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\n\n\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n  const syncPoint = syncPointTree.get(newEmptyPath()); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n\n    if (childOperation) {\n      events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: status => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(syncTree, query,\n        /*eventRegistration*/\n        null, error);\n      }\n    }\n  };\n}\n/**\r\n * Return the tag associated with the given query.\r\n */\n\n\nfunction syncTreeTagForQuery(syncTree, query) {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\n\n\nfunction syncTreeMakeQueryKey_(query) {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\n\n\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n  return syncTree.tagToQueryMap.get(tag);\n}\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\n\n\nfunction syncTreeParseQueryKey_(queryKey) {\n  const splitIndex = queryKey.indexOf('$');\n  assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n/**\r\n * A helper method to apply tagged operations\r\n */\n\n\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\n\n\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n  return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views = [];\n\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n\n      each(childMap, (_key, childViews) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\n\n\nfunction syncTreeQueryForListening_(query) {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree, queries) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n/**\r\n * Static accessor for query tags.\r\n */\n\n\nfunction syncTreeGetNextQueryTag_() {\n  return syncTreeNextQueryTag_++;\n}\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\n\n\nfunction syncTreeSetupListener_(syncTree, query, view) {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n  const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n  const subtree = syncTree.syncPointTree_.subtree(path); // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n\n  if (tag) {\n    assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n      if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n        return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n      } else {\n        // No default listener here, flatten any deeper queries into an array\n        let queries = [];\n\n        if (maybeChildSyncPoint) {\n          queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\n        }\n\n        each(childMap, (_key, childQueries) => {\n          queries = queries.concat(childQueries);\n        });\n        return queries;\n      }\n    });\n\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\n    }\n  }\n\n  return events;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass ExistingValueProvider {\n  constructor(node_) {\n    this.node_ = node_;\n  }\n\n  getImmediateChild(childName) {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node() {\n    return this.node_;\n  }\n\n}\n\nclass DeferredValueProvider {\n  constructor(syncTree, path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName) {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node() {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n\n}\n/**\r\n * Generate placeholders for deferred values.\r\n */\n\n\nconst generateWithValues = function (values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\n\n\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n\n  const delta = op['increment'];\n\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls'); // Incrementing a non-number sets the value to the incremented amount\n\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode;\n  const existingVal = leaf.getValue();\n\n  if (typeof existingVal !== 'number') {\n    return delta;\n  } // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n\n\n  return existingVal + delta;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\n\n\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\n\n\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\n\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  const rawPri = node.getPriority().val();\n  const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  let newNode;\n\n  if (node.isLeafNode()) {\n    const leafNode = node;\n    const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node;\n    newNode = childrenNode;\n\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\n\n\nclass Tree {\n  /**\r\n   * @param name - Optional name of the node.\r\n   * @param parent - Optional parent node.\r\n   * @param node - Optional node to wrap.\r\n   */\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      children: {},\n      childCount: 0\n    };\n    this.name = name;\n    this.parent = parent;\n    this.node = node;\n  }\n\n}\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\n\n\nfunction treeSubTree(tree, pathObj) {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n      next = pathGetFront(path);\n\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\n\n\nfunction treeGetValue(tree) {\n  return tree.node.value;\n}\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\n\n\nfunction treeSetValue(tree, value) {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n/**\r\n * @returns Whether the tree has any children.\r\n */\n\n\nfunction treeHasChildren(tree) {\n  return tree.node.childCount > 0;\n}\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\n\n\nfunction treeIsEmpty(tree) {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\n\n\nfunction treeForEachChild(tree, action) {\n  each(tree.node.children, (child, childTree) => {\n    action(new Tree(child, tree, childTree));\n  });\n}\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\n\n\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\n\n\nfunction treeForEachAncestor(tree, action, includeSelf) {\n  let node = includeSelf ? tree : tree.parent;\n\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n\n    node = node.parent;\n  }\n\n  return false;\n}\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\n\n\nfunction treeGetPath(tree) {\n  return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\n\n\nfunction treeUpdateParents(tree) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\n\n\nfunction treeUpdateChild(tree, childName, child) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * True for invalid Firebase keys\r\n */\n\n\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\n\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\n\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nconst isValidKey = function (key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\n\nconst isValidPathString = function (pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\n\nconst isValidRootPathString = function (pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nconst isValidPriority = function (priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\n\n\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\n\n\nconst validateFirebaseData = function (errorPrefix, data, path_) {\n  const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n  }\n\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + validationPathToErrorString(path) + ' with contents = ' + data.toString());\n  }\n\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + validationPathToErrorString(path));\n  } // Check max leaf size, but try to avoid the utf8 conversion if we can.\n\n\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + validationPathToErrorString(path) + \" ('\" + data.substring(0, 50) + \"...')\");\n  } // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n\n\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key, value) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + validationPathToErrorString(path) + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\n\n\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n  let i, curPath;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  } // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n\n\n  mergePaths.sort(pathCompare);\n  let prevPath = null;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\n\n\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix$1 = errorPrefix(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n  }\n\n  const mergePaths = [];\n  each(data, (key, value) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix$1 + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\n\nconst validatePriority = function (fnName, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  } // Special case to allow importing data with a .sv.\n\n\n  if (!isValidPriority(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\n\nconst validateKey = function (fnName, argumentName, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n\n  if (!isValidKey(key)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\n/**\r\n * @internal\r\n */\n\n\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\n\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\r\n * @internal\r\n */\n\n\nconst validateWritablePath = function (fnName, path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nconst validateUrl = function (fnName, parsedUrl) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\n\n\nclass EventQueue {\n  constructor() {\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     */\n\n    this.recursionDepth_ = 0;\n  }\n\n}\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\n\n\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList = null;\n\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = {\n        events: [],\n        path\n      };\n    }\n\n    currList.events.push(data);\n  }\n\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\n\n\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\n\n\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath));\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n  eventQueue.recursionDepth_++;\n  let sentAll = true;\n\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n\n    if (eventList) {\n      const eventPath = eventList.path;\n\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n/**\r\n * Iterates through the list and raises each event\r\n */\n\n\nfunction eventListRaise(eventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n\n      exceptionGuard(eventFn);\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\n\nconst MAX_TRANSACTION_RETRIES = 25;\n/**\r\n * A connection to a single data repository.\r\n */\n\nclass Repo {\n  constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n    this.repoInfo_ = repoInfo_;\n    this.forceRestClient_ = forceRestClient_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckProvider_ = appCheckProvider_;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n\n    this.onDisconnect_ = newSparseSnapshotTree();\n    /** Stores queues of outstanding transactions for Firebase locations. */\n\n    this.transactionQueueTree_ = new Tree(); // TODO: This should be @private but it's used by test_access.js and internal.js\n\n    this.persistentConnection_ = null; // This key is intentionally not updated if RepoInfo is later changed or replaced\n\n    this.key = this.repoInfo_.toURLString();\n  }\n  /**\r\n   * @returns The URL corresponding to the root of this Firebase.\r\n   */\n\n\n  toString() {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  }\n\n}\n\nfunction repoStart(repo, appId, authOverride) {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, repo.authTokenProvider_, repo.appCheckProvider_); // Minor hack: Fire onConnect immediately, since there's no actual connection.\n\n    setTimeout(() => repoOnConnectStatus(repo,\n    /* connectStatus= */\n    true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n      }\n\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, connectStatus => {\n      repoOnConnectStatus(repo, connectStatus);\n    }, updates => {\n      repoOnServerInfoUpdate(repo, updates);\n    }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  }); // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_)); // Used for .info.\n\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents = [];\n      const node = repo.infoData_.getNode(query._path); // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n      }); // No synchronous events for network-backed sync trees\n\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\n\n\nfunction repoServerTime(repo) {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = offsetNode.val() || 0;\n  return new Date().getTime() + offset;\n}\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\n\n\nfunction repoGenerateServerValues(repo) {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\n\n\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;\n  let events = [];\n\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(data, raw => nodeFromJSON(raw));\n      events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n    }\n  } else if (isMerge) {\n    const changedChildren = map(data, raw => nodeFromJSON(raw));\n    events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n\n  let affectedPath = path;\n\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\nfunction repoOnConnectStatus(repo, connectStatus) {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo, updates) {\n  each(updates, (key, value) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo, pathString, value) {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo) {\n  return repo.nextWriteId_++;\n}\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\n\n\nfunction repoGetValue(repo, query, eventRegistration) {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n\n  return repo.server_.get(query).then(payload => {\n    const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n    /**\r\n     * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n     * Add an event registration,\r\n     * Update data at the path,\r\n     * Raise any events,\r\n     * Cleanup the SyncTree\r\n     */\n\n    syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\n    let events;\n\n    if (query._queryParams.loadsAllData()) {\n      events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n    } else {\n      const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\n    }\n    /*\r\n     * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n     * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n     * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n     * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n     * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n     * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n     * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n     * ensure the corresponding child events will get fired.\r\n     */\n\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n    syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\n    return node;\n  }, err => {\n    repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n    return Promise.reject(new Error(err));\n  });\n}\n\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  }); // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(path.toString(), newNodeUnresolved.val(\n  /*export=*/\n  true), (status, errorReason) => {\n    const success = status === 'ok';\n\n    if (!success) {\n      warn('set at ' + path + ' failed: ' + status);\n    }\n\n    const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath); // We queued the events above, so just flush the queue here\n\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n  repoLog(repo, 'update', {\n    path: path.toString(),\n    value: childrenToMerge\n  }); // Start with our existing data and merge each child into it.\n\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren = {};\n  each(childrenToMerge, (changedKey, changedValue) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\n      const success = status === 'ok';\n\n      if (!success) {\n        warn('update at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n      const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    each(childrenToMerge, changedPath => {\n      const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n      repoRerunTransactions(repo, affectedPath);\n    }); // We queued the events above, so just flush the queue here\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\n\n\nfunction repoRunOnDisconnectEvents(repo) {\n  repoLog(repo, 'onDisconnectEvents');\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\n    const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n    sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n  });\n  let events = [];\n  sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\n    events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n    const affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n  });\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val(\n  /*export=*/\n  true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val(\n  /*export=*/\n  true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\n    if (status === 'ok') {\n      each(childrenToMerge, (childName, childNode) => {\n        const newChildNode = nodeFromJSON(childNode);\n        sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n      });\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n  let events;\n\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nfunction repoInterrupt(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nfunction repoResume(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nfunction repoLog(repo) {\n  let prefix = '';\n\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n\n  for (var _len6 = arguments.length, varArgs = new Array(_len6 > 1 ? _len6 - 1 : 0), _key7 = 1; _key7 < _len6; _key7++) {\n    varArgs[_key7 - 1] = arguments[_key7];\n  }\n\n  log(prefix, ...varArgs);\n}\n\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        error.code = code;\n        callback(error);\n      }\n    });\n  }\n}\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\n\n\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n  repoLog(repo, 'transaction on ' + path); // Initialize transaction.\n\n  const transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  }; // Run transaction initially.\n\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path); // Mark as run and add to our queue.\n\n    transaction.status = 0\n    /* TransactionStatus.RUN */\n    ;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n    treeSetValue(queueNode, nodeQueue); // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n\n    let priorityForNode;\n\n    if (typeof newVal === 'object' && newVal !== null && contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\n\n\nfunction repoGetLatestState(repo, path, excludeSets) {\n  return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;\n}\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\n\n\nfunction repoSendReadyTransactions(repo) {\n  let node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : repo.transactionQueueTree_;\n\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n    const allRun = queue.every(transaction => transaction.status === 0\n    /* TransactionStatus.RUN */\n    ); // If they're all run (and not sent), we can send them.  Else, we must wait.\n\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\n\n\nfunction repoSendTransactionQueue(repo, path, queue) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(txn.status === 0\n    /* TransactionStatus.RUN */\n    , 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = 1\n    /* TransactionStatus.SENT */\n    ;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path); // If we've gotten to this point, the output snapshot must be defined.\n\n    snapToSend = snapToSend.updateChild(relativePath\n    /** @type {!Node} */\n    , txn.currentOutputSnapshotRaw);\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path; // Send the put.\n\n  repo.server_.put(pathToSend.toString(), dataToSend, status => {\n    repoLog(repo, 'transaction put response', {\n      path: pathToSend.toString(),\n      status\n    });\n    let events = [];\n\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our\n      // transaction state, since the callback could trigger more\n      // transactions or sets.\n      const callbacks = [];\n\n      for (let i = 0; i < queue.length; i++) {\n        queue[i].status = 2\n        /* TransactionStatus.COMPLETED */\n        ;\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this\n          // transaction is complete, it should be set\n          callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\n        }\n\n        queue[i].unwatcher();\n      } // Now remove the completed transactions.\n\n\n      repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path)); // There may be pending transactions that we can now send.\n\n      repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events); // Finally, trigger onComplete callbacks.\n\n      for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (let i = 0; i < queue.length; i++) {\n          if (queue[i].status === 3\n          /* TransactionStatus.SENT_NEEDS_ABORT */\n          ) {\n            queue[i].status = 4\n            /* TransactionStatus.NEEDS_ABORT */\n            ;\n          } else {\n            queue[i].status = 0\n            /* TransactionStatus.RUN */\n            ;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = 4\n          /* TransactionStatus.NEEDS_ABORT */\n          ;\n          queue[i].abortReason = status;\n        }\n      }\n\n      repoRerunTransactions(repo, path);\n    }\n  }, latestHash);\n}\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\n\n\nfunction repoRerunTransactions(repo, changedPath) {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n  const path = treeGetPath(rootMostTransactionNode);\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n  return path;\n}\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\n\n\nfunction repoRerunTransactionQueue(repo, queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  } // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n\n\n  const callbacks = [];\n  let events = []; // Ignore all of the sets we're going to re-run.\n\n  const txnsToRerun = queue.filter(q => {\n    return q.status === 0\n    /* TransactionStatus.RUN */\n    ;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n        abortReason;\n    assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n\n    if (transaction.status === 4\n    /* TransactionStatus.NEEDS_ABORT */\n    ) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n    } else if (transaction.status === 0\n    /* TransactionStatus.RUN */\n    ) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority = typeof newData === 'object' && newData != null && contains(newData, '.priority');\n\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo); // Mutates setsToIgnore in place\n\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n      }\n    }\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = 2\n      /* TransactionStatus.COMPLETED */\n      ; // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\n        } else {\n          callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\n        }\n      }\n    }\n  } // Clean up completed transactions.\n\n\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_); // Now fire callbacks, now that we're in a good, known state.\n\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  } // Try to send the transaction result to the server.\n\n\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\n\n\nfunction repoGetAncestorTransactionNode(repo, path) {\n  let front; // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\n\n\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue = [];\n  repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue); // Sort them by the order the transactions were created.\n\n  transactionQueue.sort((a, b) => a.order - b.order);\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n  const nodeQueue = treeGetValue(node);\n\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\n\n\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n  const queue = treeGetValue(node);\n\n  if (queue) {\n    let to = 0;\n\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== 2\n      /* TransactionStatus.COMPLETED */\n      ) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\n\n\nfunction repoAbortTransactions(repo, path) {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n  treeForEachAncestor(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  repoAbortTransactionsOnNode(repo, transactionNode);\n  treeForEachDescendant(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  return affectedPath;\n}\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\n\n\nfunction repoAbortTransactionsOnNode(repo, node) {\n  const queue = treeGetValue(node);\n\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = []; // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n\n    let events = [];\n    let lastSent = -1;\n\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === 3\n      /* TransactionStatus.SENT_NEEDS_ABORT */\n      ) ;else if (queue[i].status === 1\n      /* TransactionStatus.SENT */\n      ) {\n        assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i; // Mark transaction for abort when it comes back.\n\n        queue[i].status = 3\n        /* TransactionStatus.SENT_NEEDS_ABORT */\n        ;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(queue[i].status === 0\n        /* TransactionStatus.RUN */\n        , 'Unexpected transaction status in abort'); // We can abort it immediately.\n\n        queue[i].unwatcher();\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n\n        if (queue[i].onComplete) {\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n        }\n      }\n    }\n\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    } // Now fire the callbacks.\n\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction decodePath(pathString) {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n\n      pathStringDecoded += '/' + piece;\n    }\n  }\n\n  return pathStringDecoded;\n}\n/**\r\n * @returns key value hash\r\n */\n\n\nfunction decodeQuery(queryString) {\n  const results = {};\n\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n\n    const kv = segment.split('=');\n\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n\n  return results;\n}\n\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\n  const parsedUrl = parseDatabaseURL(dataURL),\n        namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  } // Catch common error of uninitialized namespace value.\n\n\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin,\n    /*persistenceKey=*/\n    '',\n    /*includeNamespaceInQueryParams=*/\n    namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nconst parseDatabaseURL = function (dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n      domain = '',\n      subdomain = '',\n      pathString = '',\n      namespace = ''; // Always default to SSL, unless otherwise specified.\n\n  let secure = true,\n      scheme = 'https',\n      port = 443; // Don't do any validation here. The caller is responsible for validating the result of parsing.\n\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    } // Parse host, path, and query string.\n\n\n    let slashInd = dataURL.indexOf('/');\n\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n\n    let questionMarkInd = dataURL.indexOf('?');\n\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n\n    const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd))); // If we have a port, use scheme for determining if it's secure.\n\n    colonInd = host.indexOf(':');\n\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1); // Normalize namespaces to lowercase to share storage / connection.\n\n      namespace = subdomain;\n    } // Always treat the value of the `ns` as the namespace name if it is present.\n\n\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\n\n\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\n\nconst nextPushId = function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0; // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n\n  const lastRandChars = [];\n  return function (now) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    let i;\n    const timeStampChars = new Array(8);\n\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64); // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n\n      now = Math.floor(now / 64);\n    }\n\n    assert(now === 0, 'Cannot push at time == 0');\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n\n      lastRandChars[i]++;\n    }\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\n\n\nclass DataEvent {\n  /**\r\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param eventRegistration - The function to call to with the event data. User provided\r\n   * @param snapshot - The data backing the event\r\n   * @param prevName - Optional, the name of the previous child for child_* events.\r\n   */\n  constructor(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n\n  getPath() {\n    const ref = this.snapshot.ref;\n\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n\n  getEventType() {\n    return this.eventType;\n  }\n\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  toString() {\n    return this.getPath().toString() + ':' + this.eventType + ':' + stringify(this.snapshot.exportVal());\n  }\n\n}\n\nclass CancelEvent {\n  constructor(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n\n  getPath() {\n    return this.path;\n  }\n\n  getEventType() {\n    return 'cancel';\n  }\n\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  toString() {\n    return this.path.toString() + ':cancel';\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\n\n\nclass CallbackContext {\n  constructor(snapshotCallback, cancelCallback) {\n    this.snapshotCallback = snapshotCallback;\n    this.cancelCallback = cancelCallback;\n  }\n\n  onValue(expDataSnapshot, previousChildName) {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error) {\n    assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback() {\n    return !!this.cancelCallback;\n  }\n\n  matches(other) {\n    return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== undefined && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\n\n\nclass OnDisconnect {\n  /** @hideconstructor */\n  constructor(_repo, _path) {\n    this._repo = _repo;\n    this._path = _path;\n  }\n  /**\r\n   * Cancels all previously queued `onDisconnect()` set or update events for this\r\n   * location and all children.\r\n   *\r\n   * If a write has been queued for this location via a `set()` or `update()` at a\r\n   * parent location, the write at this location will be canceled, though writes\r\n   * to sibling locations will still occur.\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n\n\n  cancel() {\n    const deferred = new Deferred();\n    repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is deleted when the client is disconnected\r\n   * (due to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n\n\n  remove() {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is set to the specified value when the\r\n   * client is disconnected (due to closing the browser, navigating to a new page,\r\n   * or network issues).\r\n   *\r\n   * `set()` is especially useful for implementing \"presence\" systems, where a\r\n   * value should be changed or cleared when a user disconnects so that they\r\n   * appear \"offline\" to other users. See\r\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n   * for more information.\r\n   *\r\n   * Note that `onDisconnect` operations are only triggered once. If you want an\r\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n   * the `onDisconnect` operations each time.\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n\n\n  set(value) {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is set to the specified value and priority\r\n   * when the client is disconnected (due to closing the browser, navigating to a\r\n   * new page, or network issues).\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @param priority - The priority to be written (string, number, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n\n\n  setWithPriority(value, priority) {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Writes multiple values at this location when the client is disconnected (due\r\n   * to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * The `values` argument contains multiple property-value pairs that will be\r\n   * written to the Database together. Each child property can either be a simple\r\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n   * from the current location to the data to update.\r\n   *\r\n   * As opposed to the `set()` method, `update()` can be use to selectively update\r\n   * only the referenced properties at the current location (instead of replacing\r\n   * all the child properties at the current location).\r\n   *\r\n   * @param values - Object containing multiple values.\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n\n\n  update(values) {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @internal\r\n */\n\n\nclass QueryImpl {\n  /**\r\n   * @hideconstructor\r\n   */\n  constructor(_repo, _path, _queryParams, _orderByCalled) {\n    this._repo = _repo;\n    this._path = _path;\n    this._queryParams = _queryParams;\n    this._orderByCalled = _orderByCalled;\n  }\n\n  get key() {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref() {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier() {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n  /**\r\n   * An object representation of the query parameters used by this Query.\r\n   */\n\n\n  get _queryObject() {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other) {\n    other = getModularInstance(other);\n\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  toString() {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n\n}\n/**\r\n * Validates that no other order by call has been made\r\n */\n\n\nfunction validateNoPreviousOrderByCall(query, fnName) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n/**\r\n * Validates start/end values for queries.\r\n */\n\n\nfunction validateQueryEndpoints(params) {\n  let startNode = null;\n  let endNode = null;\n\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' + 'endAt(), endBefore(), or equalTo() must be a string.';\n\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n      throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' + '(null, a number, or a string).');\n    }\n  } else {\n    assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n\n    if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n      throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' + 'equalTo() cannot be an object.');\n    }\n  }\n}\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\n\n\nfunction validateLimit(params) {\n  if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n    throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" + 'limitToFirst() or limitToLast() instead.');\n  }\n}\n/**\r\n * @internal\r\n */\n\n\nclass ReferenceImpl extends QueryImpl {\n  /** @hideconstructor */\n  constructor(repo, path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent() {\n    const parentPath = pathParent(this._path);\n    return parentPath === null ? null : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root() {\n    let ref = this;\n\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n\n    return ref;\n  }\n\n}\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\n\n\nclass DataSnapshot {\n  /**\r\n   * @param _node - A SnapshotNode to wrap.\r\n   * @param ref - The location this snapshot came from.\r\n   * @param _index - The iteration order for this snapshot\r\n   * @hideconstructor\r\n   */\n  constructor(_node,\n  /**\r\n   * The location of this DataSnapshot.\r\n   */\n  ref, _index) {\n    this._node = _node;\n    this.ref = ref;\n    this._index = _index;\n  }\n  /**\r\n   * Gets the priority value of the data in this `DataSnapshot`.\r\n   *\r\n   * Applications need not use priority but can order collections by\r\n   * ordinary properties (see\r\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n   * ).\r\n   */\n\n\n  get priority() {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val();\n  }\n  /**\r\n   * The key (last part of the path) of the location of this `DataSnapshot`.\r\n   *\r\n   * The last token in a Database location is considered its key. For example,\r\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n   * `DataSnapshot` will return the key for the location that generated it.\r\n   * However, accessing the key on the root URL of a Database will return\r\n   * `null`.\r\n   */\n\n\n  get key() {\n    return this.ref.key;\n  }\n  /** Returns the number of child properties of this `DataSnapshot`. */\n\n\n  get size() {\n    return this._node.numChildren();\n  }\n  /**\r\n   * Gets another `DataSnapshot` for the location at the specified relative path.\r\n   *\r\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n   * another `DataSnapshot` for the location at the specified relative path. The\r\n   * relative path can either be a simple child name (for example, \"ada\") or a\r\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n   * whose value is `null`) is returned.\r\n   *\r\n   * @param path - A relative path to the location of child data.\r\n   */\n\n\n  child(path) {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n  }\n  /**\r\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n   * efficient than using `snapshot.val() !== null`.\r\n   */\n\n\n  exists() {\n    return !this._node.isEmpty();\n  }\n  /**\r\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n   *\r\n   * The `exportVal()` method is similar to `val()`, except priority information\r\n   * is included (if available), making it suitable for backing up your data.\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  exportVal() {\n    return this._node.val(true);\n  }\n  /**\r\n   * Enumerates the top-level children in the `DataSnapshot`.\r\n   *\r\n   * Because of the way JavaScript objects work, the ordering of data in the\r\n   * JavaScript object returned by `val()` is not guaranteed to match the\r\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n   * where `forEach()` comes in handy. It guarantees the children of a\r\n   * `DataSnapshot` will be iterated in their query order.\r\n   *\r\n   * If no explicit `orderBy*()` method is used, results are returned\r\n   * ordered by key (unless priorities are used, in which case, results are\r\n   * returned by priority).\r\n   *\r\n   * @param action - A function that will be called for each child DataSnapshot.\r\n   * The callback can return true to cancel further enumeration.\r\n   * @returns true if enumeration was canceled due to your callback returning\r\n   * true.\r\n   */\n\n\n  forEach(action) {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node; // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\n    });\n  }\n  /**\r\n   * Returns true if the specified child path has (non-null) data.\r\n   *\r\n   * @param path - A relative path to the location of a potential child.\r\n   * @returns `true` if data exists at the specified child path; else\r\n   *  `false`.\r\n   */\n\n\n  hasChild(path) {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n  /**\r\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n   * properties.\r\n   *\r\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n   * children. If it does, you can enumerate them using `forEach()`. If it\r\n   * doesn't, then either this snapshot contains a primitive value (which can be\r\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n   * `null`).\r\n   *\r\n   * @returns true if this snapshot has any children; else false.\r\n   */\n\n\n  hasChildren() {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n  /**\r\n   * Returns a JSON-serializable representation of this object.\r\n   */\n\n\n  toJSON() {\n    return this.exportVal();\n  }\n  /**\r\n   * Extracts a JavaScript value from a `DataSnapshot`.\r\n   *\r\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n   * scalar type (string, number, or boolean), an array, or an object. It may\r\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n   * data).\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  val() {\n    return this._node.val();\n  }\n\n}\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\n\n\nfunction ref(db, path) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('ref');\n\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\n\n\nfunction refFromURL(db, url) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('refFromURL');\n\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n  const repoInfo = parsedURL.repoInfo;\n\n  if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) {\n    fatal('refFromURL' + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\n\n\nfunction child(parent, path) {\n  parent = getModularInstance(parent);\n\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\n\n\nfunction onDisconnect(ref) {\n  ref = getModularInstance(ref);\n  return new OnDisconnect(ref._repo, ref._path);\n}\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\n\n\nfunction push(parent, value) {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now); // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n\n  const thennablePushRef = child(parent, name);\n  const pushRef = child(parent, name);\n  let promise;\n\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef;\n}\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\n\n\nfunction remove(ref) {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\n\n\nfunction set(ref, value) {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value,\n  /*priority=*/\n  null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\n\n\nfunction setPriority(ref, priority) {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\n\n\nfunction setWithPriority(ref, value, priority) {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\n\n\nfunction update(ref, values) {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred();\n  repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\n\n\nfunction get(query) {\n  query = getModularInstance(query);\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n  });\n}\n/**\r\n * Represents registration for 'value' events.\r\n */\n\n\nclass ValueEventRegistration {\n  constructor(callbackContext) {\n    this.callbackContext = callbackContext;\n  }\n\n  respondsTo(eventType) {\n    return eventType === 'value';\n  }\n\n  createEvent(change, query) {\n    const index = query._queryParams.getIndex();\n\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n  }\n\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, null);\n    }\n  }\n\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback() {\n    return this.callbackContext !== null;\n  }\n\n}\n/**\r\n * Represents the registration of a child_x event.\r\n */\n\n\nclass ChildEventRegistration {\n  constructor(eventType, callbackContext) {\n    this.eventType = eventType;\n    this.callbackContext = callbackContext;\n  }\n\n  respondsTo(eventType) {\n    let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change, query) {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n\n    const index = query._queryParams.getIndex();\n\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n  }\n\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n    }\n  }\n\n  matches(other) {\n    if (other instanceof ChildEventRegistration) {\n      return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));\n    }\n\n    return false;\n  }\n\n  hasAnyCallback() {\n    return !!this.callbackContext;\n  }\n\n}\n\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n  let cancelCallback;\n\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n\n    const onceCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n  const container = eventType === 'value' ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\n\n\nfunction off(query, eventType, callback) {\n  let container = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\n\n\nclass QueryConstraint {}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endAt: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n\n}\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\n\n\nfunction endAt(value, key) {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endBefore: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n\n}\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\n\n\nfunction endBefore(value, key) {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAt: Starting point was already set (by another call to startAt, ' + 'startBefore or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n\n}\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\n\n\nfunction startAt() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let key = arguments.length > 1 ? arguments[1] : undefined;\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAfter: Starting point was already set (by another call to startAt, ' + 'startAfter, or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n\n}\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\n\n\nfunction startAfter(value, key) {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n  }\n\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n  }\n\n}\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\n\n\nfunction limitToFirst(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n  }\n\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n  }\n\n}\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\n\n\nfunction limitToLast(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  constructor(_path) {\n    super();\n    this._path = _path;\n  }\n\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n    }\n\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  }\n\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\n\n\nfunction orderByChild(path) {\n  if (path === '$key') {\n    throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n  } else if (path === '$priority') {\n    throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n  } else if (path === '$value') {\n    throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n  }\n\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  }\n\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\n\n\nfunction orderByKey() {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  }\n\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\n\n\nfunction orderByPriority() {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  }\n\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\n\n\nfunction orderByValue() {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n\n    if (query._queryParams.hasStart()) {\n      throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' + 'equalTo).');\n    }\n\n    if (query._queryParams.hasEnd()) {\n      throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' + 'equalTo).');\n    }\n\n    return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n  }\n\n}\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\n\n\nfunction equalTo(value, key) {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\n\n\nfunction query(query) {\n  let queryImpl = getModularInstance(query);\n\n  for (var _len7 = arguments.length, queryConstraints = new Array(_len7 > 1 ? _len7 - 1 : 0), _key8 = 1; _key8 < _len7; _key8++) {\n    queryConstraints[_key8 - 1] = arguments[_key8];\n  }\n\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n\n  return queryImpl;\n}\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\n\n\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\n\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\r\n * Creates and caches `Repo` instances.\r\n */\n\nconst repos = {};\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\n\nlet useRestClient = false;\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\n\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n  repo.repoInfo_ = new RepoInfo(`${host}:${port}`,\n  /* secure= */\n  false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams,\n  /*isUsingEmulator=*/\n  true);\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\n\n\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n  let dbUrl = url || app.options.databaseURL;\n\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\"Can't determine Firebase Database URL. Be sure to include \" + ' a Project ID when calling firebase.initializeApp().');\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n  let isEmulator;\n  let dbEmulatorHost = undefined;\n\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n  }\n\n  const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n  return new Database(repo, app);\n}\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\n\n\nfunction repoManagerDeleteRepo(repo, appName) {\n  const appRepos = repos[appName]; // This should never happen...\n\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\n\n\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n\n  if (repo) {\n    fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n  }\n\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n  return repo;\n}\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\n\n\nfunction repoManagerForceRestClient(forceRestClient) {\n  useRestClient = forceRestClient;\n}\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\n\n\nclass Database {\n  /** @hideconstructor */\n  constructor(_repoInternal,\n  /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n  app) {\n    this._repoInternal = _repoInternal;\n    this.app = app;\n    /** Represents a `Database` instance. */\n\n    this['type'] = 'database';\n    /** Track if the instance has been used (root or repo accessed) */\n\n    this._instanceStarted = false;\n  }\n\n  get _repo() {\n    if (!this._instanceStarted) {\n      repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n      this._instanceStarted = true;\n    }\n\n    return this._repoInternal;\n  }\n\n  get _root() {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n\n    return this._rootInternal;\n  }\n\n  _delete() {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\n  }\n}\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\n\n\nfunction forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\n\n\nfunction forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\n\n\nfunction getDatabase() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  let url = arguments.length > 1 ? arguments[1] : undefined;\n\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  });\n\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n\n  return db;\n}\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\n\n\nfunction connectDatabaseEmulator(db, host, port) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('useEmulator');\n\n  if (db._instanceStarted) {\n    fatal('Cannot call useEmulator() after instance has already been initialized.');\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider = undefined;\n\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n    }\n\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token = typeof options.mockUserToken === 'string' ? options.mockUserToken : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  } // Modify the repo to apply emulator settings\n\n\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\n\n\nfunction goOffline(db) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('goOffline');\n\n  repoInterrupt(db._repo);\n}\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\n\n\nfunction goOnline(db) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('goOnline');\n\n  repoResume(db._repo);\n}\n\nfunction enableLogging(logger, persistent) {\n  enableLogging$1(logger, persistent);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerDatabase(variant) {\n  setSDKVersion(SDK_VERSION$1);\n\n  _registerComponent(new Component('database', (container, _ref2) => {\n    let {\n      instanceIdentifier: url\n    } = _ref2;\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n  }, \"PUBLIC\"\n  /* ComponentType.PUBLIC */\n  ).setMultipleInstances(true));\n\n  registerVersion(name, version, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\n\nfunction serverTimestamp() {\n  return SERVER_TIMESTAMP;\n}\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\n\n\nfunction increment(delta) {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\n\n\nclass TransactionResult {\n  /** @hideconstructor */\n  constructor(\n  /** Whether the transaction was successfully committed. */\n  committed,\n  /** The resulting data snapshot. */\n  snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  /** Returns a JSON-serializable representation of this object. */\n\n\n  toJSON() {\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  }\n\n}\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\n\n\nfunction runTransaction(ref, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n  var _a;\n\n  ref = getModularInstance(ref);\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'Reference.transaction failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n  const deferred = new Deferred();\n\n  const promiseComplete = (error, committed, node) => {\n    let dataSnapshot = null;\n\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  }; // Add a watch to make sure we get server updates.\n\n\n  const unwatcher = onValue(ref, () => {});\n  repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n  return deferred.promise;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nPersistentConnection; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n}; // RealTimeConnection properties that we use in tests.\n\n\nConnection;\n/**\r\n * @internal\r\n */\n\nconst hijackHash = function (newHash) {\n  const oldPut = PersistentConnection.prototype.put;\n\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nRepoInfo;\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\n\nconst forceRestClient = function (forceRestClient) {\n  repoManagerForceRestClient(forceRestClient);\n};\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterDatabase();\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };","map":{"version":3,"mappings":"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","names":["SDK_VERSION","setSDKVersion","version","DOMStorageWrapper","constructor","domStorage_","prefix_","set","key","value","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","name","toString","MemoryStorage","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","varArgs","logWrapper","prefix","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appCheckProvider","appName_","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","reject","addTokenChangeListener","listener","_a","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","type","params","connURL","pairs","each","StatsCollection","counters_","incrementCounter","amount","deepCopy","collections","reporters","statsManagerGetCollection","hashString","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","callback","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","Set","pendingSegs","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","outstandingRequests","size","currentSerial","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","options","device","headers","platform","env","process","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","clearInterval","setInterval","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","state_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","handshakePayload","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","token","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","online_","isMobileCordova","getInstance","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pieceNum","pieces_","pathOrString","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","slice","pathParent","pieces","childPathObj","childPieces","pathIsEmpty","outerPath","innerPath","outer","inner","newRelativePath","left","right","leftKeys","rightKeys","cmp","other","j","ValidationPath","errorPrefix_","parts_","byteLength_","max","stringLength","validationPathCheckValid","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","deferred","Deferred","request","p","q","_queryObject","outstandingGet","index","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","listens","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","safeGet","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","undefined","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","resume","isEmpty","delta","serverTimeOffset","map","normalizedPathString","statusCode","explanation","console","replace","queries","values","clientName","isReactNative","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","LLRBEmptyNode","comparator_","root_","BLACK","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","MAX_NODE","setMaxNode","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","nodeFromJSON","setNodeFromJSON","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexSet_","indexes_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","next","newIndex","indexName","newIndexSet","Object","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","NAME_COMPARATOR","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","setPriorityMaxNode","USE_HINZE","json","jsonLeaf","children","childrenHavePriority","hinzeJsonObj","childSet","NAME_ONLY_COMPARATOR","sortedChildSet","childData","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","changeValue","snapshotNode","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","source","optChangeAccumulator","oldChild","trackChildChange","changeChildRemoved","changeChildAdded","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","inRange","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","newLimit","newParams","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsToRestQueryStringParameters","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","getListenId_","listenId","thisListen","queryStringParameters","restRequest_","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","getNode","rootNode_","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","tree","sparseSnapshotTreeForget","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","forEach","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","server_","statsToReport_","statsListener_","collection","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","changeChildMoved","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","newViewCache","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","pathChild","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","shadowingNode","compoundWriteIsEmpty","applySubtreeWrite","writeTree","priorityWrite","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","record","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","pathContains","writeTreeResetTree_","compoundWriteRemoveWrite","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","compoundWriteChildCompoundWrite","compoundWriteHasCompleteWrite","layeredCache","compoundWriteApply","mergeAtPath","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","ChildChangeAccumulator","oldChange","changeMap","oldType","getChanges","from","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","writeTreeRefCalcIndexedSlice","newViewProcessor","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorAckUserWrite","viewProcessorRevertUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","writeTreeRefShadowingWrite","completeEventChildren","writeTreeRefCalcCompleteEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteNode","cache","viewIsEmpty","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewProcessorAssertIndexed","viewGenerateEventsForChanges_","initialChanges","eventNode","referenceConstructor","SyncPoint","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","views","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","viewAddEventRegistration","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","viewGetCompleteServerCache","syncPointGetCompleteView","syncPointViewForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","pendingWriteTree_","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","syncTreeAckUserWrite","writeTreeGetWrite","needToReevaluate","writeTreeRemoveWrite","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","skipListenerDedup","maybeSyncPoint","syncPointTree_","syncPointViewExistsForQuery","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","queryToTagMap","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","syncPointGetCompleteServerCache","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","tagToQueryMap","writeTreeChildWrites","syncPointAddEventRegistration","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","writeTreeRefChild","syncTreeApplyListenComplete","errorForServerCode","syncTreeRemoveEventRegistration","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","pathObj","treeGetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachDescendant","includeSelf","childrenFirst","treeForEachChild","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefixFxn","errorPrefix","hasDotValue","hasActualChild","validationPathPush","validateFirebaseMergePaths","mergePaths","curPath","pathCompare","prevPath","validateFirebaseMergeDataArg","validatePriority","validateKey","argumentName","validateRootPathString","validatePathString","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueue","eventDataList","currList","getPath","pathEquals","eventQueueRaiseEventsAtPath","eventQueueQueueEvents","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","nextWriteId_","interceptServerDataCallback_","persistentConnection_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","statsReporter_","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","eventQueue_","repoServerTime","offsetNode","offset","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoGetValue","cached","syncTreeGetServerValue","err","repoLog","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","repoOnDisconnectSet","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","transactionUpdate","unwatcher","applyLocally","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","treeSubTree","transactionQueueTree_","nodeQueue","treeSetValue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","charAt","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","cancelCallback","snapshotCallback","onValue","expDataSnapshot","previousChildName","call","onCancel","hasCancelCallback","userCallback","OnDisconnect","cancel","wrapCallback","validateWritablePath","setWithPriority","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","getModularInstance","sameRepo","samePath","sameQueryIdentifier","toJSON","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","parsedURL","thennablePushRef","pushRef","callbackContext","container","ValueEventRegistration","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","expCallback","QueryConstraint","QueryEndAtConstraint","_value","_apply","QueryEndBeforeConstraint","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","QueryLimitToFirstConstraint","_limit","queryParamsLimitToFirst","limitToFirst","limit","QueryLimitToLastConstraint","queryParamsLimitToLast","limitToLast","QueryOrderByChildConstraint","parsedPath","queryParamsOrderBy","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","queryImpl","queryConstraints","constraint","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","OWNER","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","repoManagerForceRestClient","forceRestClient","_repoInternal","_instanceStarted","_rootInternal","_delete","apiName","checkTransportInit","forceWebSockets","forceLongPolling","getDatabase","getApp","_getProvider","identifier","emulator","getDefaultEmulatorHostnameAndPort","connectDatabaseEmulator","mockUserToken","createMockUserToken","goOffline","goOnline","enableLoggingImpl","registerDatabase","variant","_registerComponent","Component","instanceIdentifier","getProvider","setMultipleInstances","registerVersion","SERVER_TIMESTAMP","serverTimestamp","increment","TransactionResult","committed","runTransaction","promiseComplete","repoStartTransaction","prototype","simpleListen","echo","onEcho","hijackHash","newHash","oldPut"],"sources":["/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/version.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/storage/storage.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/util/util.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/AuthTokenProvider.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/realtime/Constants.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/RepoInfo.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/stats/StatsCollection.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/stats/StatsManager.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/realtime/TransportManager.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/realtime/Connection.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/ServerActions.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/util/EventEmitter.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/util/Path.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/PersistentConnection.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/snap/Node.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/snap/indexes/Index.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/util/SortedMap.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/snap/comparators.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/snap/snap.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/snap/LeafNode.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/snap/childSet.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/snap/IndexMap.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/Change.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/QueryParams.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/SnapshotHolder.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/stats/StatsListener.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/stats/StatsReporter.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/operation/Operation.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/operation/ListenComplete.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/operation/Overwrite.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/operation/Merge.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/CacheNode.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/EventGenerator.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/ViewCache.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/util/ImmutableTree.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/CompoundWrite.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/WriteTree.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/ViewProcessor.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/View.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/SyncPoint.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/SyncTree.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/util/ServerValues.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/util/Tree.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/util/validation.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/EventQueue.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/Repo.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/util/libs/parser.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/util/NextPushId.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/Event.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/core/view/EventRegistration.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/api/OnDisconnect.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/api/Reference_impl.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/api/Database.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/register.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/api/ServerValue.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/api/Transaction.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/api/test_access.ts","/home/wink/airbnb-clone-main/node_modules/@firebase/database/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false,\n    public readonly isUsingEmulator: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = {\n          ...(payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          })\n        };\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n\n  private withinEndPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams,\n    /*isUsingEmulator=*/ true\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}